<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>HuangChao's Blog</title>
 <link href="http://username.github.io/" rel="self"/>
 <link href="http://username.github.io"/>
 <updated>2014-03-25T23:07:13+08:00</updated>
 <id>http://username.github.io</id>
 <author>
   <name>Huang Chao</name>
   <email>huangchao.cpp@gmail.com</email>
 </author>

 
 <entry>
   <title>Effective C++ 笔记2</title>
   <link href="http://username.github.io/blog/2012/08/13/effective-cpp-study-note-2"/>
   <updated>2012-08-13T15:52:47Z</updated>
   <id>http://username.github.io/blog/2012/08/13/effective-cpp-study-note-2</id>
   <content type="html">&lt;h1 id=&quot;2const_enum_inlinedefine&quot;&gt;条款2：尽量以const, enum, inline替换#define&lt;/h1&gt;

&lt;p&gt;define只是简单的替换，就是因为太简单，程序员考虑的可就要多了。&lt;/p&gt;

&lt;p&gt;比如我来一段这样的代码：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/effectivecpp/truefalse.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;直觉上觉得应该是编译不通过吧，可是：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/effectivecpp/run.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果有个坏蛋把这一条加到某个头文件中，估计找bug也会找晕吧。&lt;/p&gt;

&lt;p&gt;还有，如果2个文件中都有宏定义，而且名字重复了，这样的情况也是可能存在的。&lt;/p&gt;

&lt;p&gt;用const还有一个好处，就是const的变量在程序里只有一份拷贝，而define则会产生多份拷贝，算是程序的一个小优化。&lt;/p&gt;

&lt;p&gt;不过define还有const做不到的事，其一就是宏函数，但是宏函数也有一些缺陷，&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;    &lt;span class='err'&gt;#&lt;/span&gt;&lt;span class='n'&gt;define&lt;/span&gt; &lt;span class='n'&gt;CALL_WITH_MAX&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='err'&gt; &lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;((&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;?&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;CALL_WITH_MAX&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='n'&gt;CALL_WITH_MAX&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些都是不良代码，足以体现出define的缺陷。所以书中建议用const来代替#define.并借助inline在保证效率的同时解决上述宏函数的问题。&lt;/p&gt;

&lt;p&gt;至此，似乎define一无是处，那为什么不废除define，说是为了兼容c代码似乎有些说不过去，因为C99里面const也是关键字之一了。&lt;/p&gt;

&lt;p&gt;我觉得define还有const做不到的事，这源自于define的处理是在编译期间的预处理阶段，所以可以作为编译开关，最常用的：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;    &lt;span class='err'&gt;#&lt;/span&gt;&lt;span class='n'&gt;ifndef&lt;/span&gt; &lt;span class='n'&gt;XXX_H&lt;/span&gt;
    &lt;span class='err'&gt;#&lt;/span&gt;&lt;span class='n'&gt;define&lt;/span&gt; &lt;span class='n'&gt;XXX_H&lt;/span&gt;
    &lt;span class='err'&gt;#&lt;/span&gt;&lt;span class='n'&gt;endif&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还有就是define的用法里面一直有##和#,这2个符号我几乎没有用过，只是在某些地方看到过，简单来说，##用来拼接，而#则是将其变为字符串。比如：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;    &lt;span class='err'&gt;#&lt;/span&gt;&lt;span class='n'&gt;define&lt;/span&gt; &lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='err'&gt;##&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='err'&gt;，那么&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='err'&gt;就是&lt;/span&gt;&lt;span class='n'&gt;A1&lt;/span&gt;&lt;span class='err'&gt;，&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='err'&gt;就是&lt;/span&gt;&lt;span class='n'&gt;A2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;ABC&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;def&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='err'&gt;就是&lt;/span&gt;&lt;span class='n'&gt;ABCdef&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='err'&gt;依然是简单的替换。&lt;/span&gt;
    &lt;span class='err'&gt;#&lt;/span&gt;&lt;span class='n'&gt;define&lt;/span&gt; &lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='err'&gt;#&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='err'&gt;，则&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='err'&gt;则是&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;1+2&amp;quot;&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/effectivecpp/define.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有个想法，以前在指定函数指针的时候，总感觉不能按照规律来调用某个函数，现在能否借助define的##来实现不同函数指针的调用呢？&lt;/p&gt;

&lt;p&gt;比如我:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;    &lt;span class='err'&gt;#&lt;/span&gt;&lt;span class='n'&gt;define&lt;/span&gt; &lt;span class='n'&gt;FUN&lt;/span&gt; &lt;span class='n'&gt;fun&lt;/span&gt;&lt;span class='err'&gt;##&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;
    &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;:&lt;span class='n'&gt;call&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;FUN&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;&lt;span class='c1'&gt;//实现情况2则调用fun_x这个函数。&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有待于进一步验证，今天太晚了，明天再去公司试试。&lt;/p&gt;

&lt;p&gt;严格来说，define和const根本就是2个不同的东西，只不过实现的功能有部分的类似，不过对于变量的定义来说，最好用const，因为const更健壮。&lt;/p&gt;

&lt;p&gt;最后，总结一下类中成员变量的初始化问题：&lt;/p&gt;

&lt;p&gt;const 变量只能在构造函数的初始化列表中初始化。&lt;/p&gt;

&lt;p&gt;static 变量只能在类外部初始化，只有一种例外，static const int类型可以在类中初始化。&lt;/p&gt;

&lt;p&gt;除上述的变量外，其余变量都应该在类的构造函数中初始化，除非你不想初始化，而是在某个函数中第一次用的时候赋值，当然，这不是一种好的编程习惯。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Effective C++ 笔记1</title>
   <link href="http://username.github.io/blog/2012/08/09/effective-cpp-study-note-1"/>
   <updated>2012-08-09T11:10:15Z</updated>
   <id>http://username.github.io/blog/2012/08/09/effective-cpp-study-note-1</id>
   <content type="html">&lt;p&gt;印象中，大一学的C语言，大二学的C++，至今学习编程也有5年多，很可惜，没有一门精通的。&lt;/p&gt;

&lt;p&gt;首先说一下我会的语言。&lt;/p&gt;

&lt;p&gt;Java，停留在J2SE的水平，也就是看懂，会用，但是并不深入。像反射的特性一直没搞懂，记得当时看了侯捷的一篇关于反射机制的文章，但没有深入，关键是Java代码写的少，语言这种东西，光说不练是不行的。写Java感觉一些一大堆，但是底层怎么实现的，不知道。虚拟机让我和操作系统之间隔了一层。可以说是放弃了底层与面向过程的编程方式，对C++的一种改进。极大的提高了生产力，虽然效率上可能会有些损失，这其实比较符合现今社会的价值观，快速的产出。&lt;/p&gt;

&lt;p&gt;Python，停留在会用的阶段，而且很多时候还得先去查这个函数怎么用。但是Python给我的感觉很好，简洁而高效。现在国外的某些大学的编程入门语言已经变成python，而且各种各样的库可以将你的想法迅速的实现。&lt;/p&gt;

&lt;p&gt;Pascal，看的懂，不会编写。这门语言基本都是当时搞ACM时候学了点皮毛，从来没有用它写过一个完整的程序并运行。&lt;/p&gt;

&lt;p&gt;Shell，Shell给我的感觉不像是一门语言，而是一种工具。一个shell程序一般都会依赖于其他的程序，比如awk，grep等，可能这也是我没有将shell学到家的肤浅看法。&lt;/p&gt;

&lt;p&gt;C++，其实学了这么多年的语言，学的最好的还是C语言。而且由于很多情况下都是在linux下编程，调用系统函数比较多，给我的感觉仍然是在写带类的C。&lt;/p&gt;

&lt;p&gt;面向对象和泛型编程在我目前写过的程序中占很小的部分。顶多用到了继承，虚函数，模板等。但是我知道面向对象并不只是封装，继承，多态这么简单，模板也不只是函数和类上面戴了个帽子。所以我决定好好学一下C++，毕竟能上天入地的语言还是非C++莫属。&lt;/p&gt;

&lt;p&gt;条款1：视C++为一个语言联邦。&lt;/p&gt;

&lt;p&gt;C++是一门包含各种特性的语言。可以说是一把瑞士军刀，就看你会不会用，不会用反而可能伤到自己。听起来又有点像《倚天屠龙记》里面的七伤拳，内力不足则伤己。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>CS:APP bufbomb 缓冲区溢出攻击</title>
   <link href="http://username.github.io/blog/2012/04/13/csapp-bufbomb-stack-overflow-attack"/>
   <updated>2012-04-13T14:17:13Z</updated>
   <id>http://username.github.io/blog/2012/04/13/csapp-bufbomb-stack-overflow-attack</id>
   <content type="html">&lt;p&gt;要攻击的程序源代码:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://csapp.cs.cmu.edu/public/1e/ics/code/asm/bufbomb.c&quot;&gt;http://csapp.cs.cmu.edu/public/1e/ics/code/asm/bufbomb.c&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;目标是输入特定的字符，让程序最终输出0xdeadbeef.&lt;/p&gt;

&lt;p&gt;需要注意的是该程序接受数据是字符的16进制编码，比如你如果想让getbuf函数中的buf中的内容变成“0123”，那么你要输入30 31 32 33.&lt;/p&gt;

&lt;p&gt;以前听到这个缓冲区溢出攻击这个词总觉得高深莫测，那是黑客的本领，最近在看CS:APP发现上面就有缓冲区溢出的实验,从这本书的名字可以看出，就是让你知道计算机底层都在干什么，推荐每个写程序的人都看一下。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;    
    &lt;span class='cm'&gt;/* $begin getbuf-c */&lt;/span&gt;
    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;getbuf&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
    &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='n'&gt;buf&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;12&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
        &lt;span class='n'&gt;getxs&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;buf&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;test&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
    &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='n'&gt;printf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Type Hex string:&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;getbuf&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
      &lt;span class='n'&gt;printf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;getbuf returned 0x%x&lt;/span&gt;&lt;span class='se'&gt;\n&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码可以看出，val的值应该是总是为1的，所以输出总是1，现在就是让你写入特定的字符，让其输出为0xdeadbeef.这个实验只是简单介绍了缓冲区溢出攻击的原理，但是随着编译器的发展，这个实验也越来越难做了。目前我只能做到禁用gcc的堆栈保护，而且只在gdb中成功，真实运行的时候虽然成功的输出了0xdeadbeef，但是程序结束后总是伴随着段错误。这里记录一下学习的过程，我觉得这个实验还有改进的余地，只是目前对编译器以及汇编的掌握还不够熟练。&lt;/p&gt;

&lt;p&gt;这个程序的缓冲区溢出攻击是十分依赖于机器的，编译器的版本，系统内核的版本等等因素都会导致生成的可执行文件不同，所以这个实验需要了解程序的机器级表示的相关知识，也就是CS:APP的第3章的内容，windows版本的攻击应该是更为简单的，目前我还没有听到windows有类似linux的Exec Shield Overflow Protection.&lt;/p&gt;

&lt;p&gt;可以说，通过这次实验的学习，发现了很多对程序运行过程的误解，操作系统学的真烂=.=&lt;/p&gt;

&lt;p&gt;首先，一个进程是怎么在内存里布局的？强烈建议读一下这篇blog:&lt;a href=&quot;http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory&quot;&gt;http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory&lt;/a&gt;,在现代的操作系统中，每个进程都运行在自己的虚拟地址空间中，类似一个沙盒，让每一个进程都感觉自己运行在一个4G的内存空间中，当然这只是给进程以及用户的一种幻觉，实际上每个进程的虚拟地址空间都会被分页机制映射到物理地址的页或者虚拟内存的页，虚拟内存就是当内存不够时用硬盘充当一部份内存使用，比如linux的swap分区。&lt;/p&gt;

&lt;p&gt;下面仅以linux说明可执行文件的运行过程。&lt;/p&gt;

&lt;p&gt;其中，在0-0xFFFFFFFF的虚拟地址空间中，高地址的1G(0xC0000000-0xFFFFFFFF)范围被linux用作内核空间，用户空间是低的3G范围。如下图所示(来自上面链接的文章)：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/csapp/linuxFlexibleAddressSpaceLayout.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里吗可以看出中间有许多random offset，这也加大了缓冲区溢出攻击的难度，其中栈区是有固定大小的，可以输入ulimit -s来确定，我的机子返回的是8192，也就是8M的空间，当你写了一个无限递归的函数时，这个空间就会很快被填满，然后导致stack overflow,堆区理论上可以一直向上申请到Memory Mapping Segment,不过一般没有程序会使用这么大的内存。&lt;/p&gt;

&lt;p&gt;这里我很好奇的是0x08048000这个数是怎么来的，Google了一下，好像都没有说明，不知道有没有什么历史。不过这个数是作为linux应用程序的起始地址。但是如果用objdump反汇编一个程序，会发现程序的文本段，比如main函数的位置并不是从0x08048000开始的，这是因为0x08048000首先存放的是ELF header，包含了这个程序的信息。&lt;/p&gt;

&lt;p&gt;每个进程的虚拟内存布局可以通过查看/proc/pid/maps这个文件来查看，其中pid换成想要查看的进程编号，比如实验的./bufbomb布局如下：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/csapp/part_017.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里可以看到0x08048000以下的地址被用来映射许多动态链接库，比如libc和ld，这和上图的布局有些出入，估计是因为linux的内核升级，将memory mapping segment存放到了0x08048000下面？以前最下面的空白区是不做任何用途的。&lt;/p&gt;

&lt;p&gt;缓冲区溢出攻击只是针对程序的栈这一部分，在栈里面会存放程序运行的栈帧，因为当一个函数调用另一个函数时，要将当前运行的信息保存起来(相当于入栈)，然后再跳转到另一个函数的地址执行，执行完后要回到调用这个函数的下一条指令接着执行，然后就将保存的信息取出(相当于出栈)，入栈出栈的操作是通过ebp寄存器和esp寄存器来完成的。这两个寄存器都指向栈区，可以这么理解，ebp指向某个过程的基地址，esp指向某个过程的栈顶，这里的某个过程通常来说就是指函数。ebp和esp之间，就是某个过程(函数)运行需要的所有数据。&lt;/p&gt;

&lt;p&gt;拿上述的bufbomb.c来说，用gcc 将其编译为可执行文件:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$gcc bufbomb.c -o bufbomb -fno-stack-protector&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之所以加上后面的-fno-stack-protector是为了禁用gcc的堆栈保护。&lt;/p&gt;

&lt;p&gt;然后用objdump将bufbomb反汇编&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$objdump -d bufbomb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后可以得到bufbomb的代码如下，只取test函数和getbuf函数的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;08048532 &amp;lt;getbuf&amp;gt;:
8048532: 55                  push %ebp
8048533: 89 e5               mov %esp,%ebp
8048535: 83 ec 28            sub $0x28,%esp
8048538: 8d 45 ec            lea -0x14(%ebp),%eax
804853b: 89 04 24            mov %eax,(%esp)
804853e: e8 21 ff ff ff      call 8048464 &amp;lt;getxs&amp;gt;
8048543: b8 01 00 00 00      mov $0x1,%eax
8048548: c9 leave
8048549: c3 ret

0804854a &amp;lt;test&amp;gt;:
804854a: 55                  push %ebp
804854b: 89 e5               mov %esp,%ebp
804854d: 83 ec 28            sub $0x28,%esp
8048550: b8 c0 86 04 08      mov $0x80486c0,%eax
8048555: 89 04 24            mov %eax,(%esp)
8048558: e8 03 fe ff ff      call 8048360 &amp;lt;printf@plt&amp;gt;
804855d: e8 d0 ff ff ff      call 8048532 &amp;lt;getbuf&amp;gt;
8048562: 89 45 f4            mov %eax,-0xc(%ebp)
8048565: b8 d1 86 04 08      mov $0x80486d1,%eax   #printf args 0
804856a: 8b 55 f4            mov -0xc(%ebp),%edx
804856d: 89 54 24 04         mov %edx,0x4(%esp)
8048571: 89 04 24            mov %eax,(%esp)
8048574: e8 e7 fd ff ff      call 8048360 &amp;lt;printf@plt&amp;gt;
8048579: c9                  leave
804857a: c3                  ret&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后通过gdb调试可以得到下面的栈帧图,我保存在了google doc里面：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/csapp/part_020.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;左边绿色的部分是test函数的栈帧，黄色的部分是getbuf函数的栈帧，蓝色部分是下面的栈帧执行完后要跳转到的指令地址，这个地址每次call的时候自动填充，所以理论上应该是属于上衣个栈帧的内容，这里由于返回后的esp并没有指向这个返回地址，所以没有将其包含进栈帧。目前我明确的参数都有所注释，还有许多地址中的数据我还不明白其中的含义，所以这里还值得研究一下。目前该图含有的信息:&lt;/p&gt;

&lt;p&gt;一个函数执行完成后要跳转到的地址(由ret指令来完成)，比如getbuf函数的栈帧(黄色区域),其执行完后eip的地址即为0x08048562。&lt;/p&gt;

&lt;p&gt;printf的参数放在第27,28行，分别表示printf的第0个参数,第一个参数是1，因为最后printf只会打印一个1出来，第0个参数则是字符串的地址，用gdb可以获得其数据：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/csapp/part_021.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;需要注意的是栈帧图中的28行为0x080486c0,而不是上面gdb调试中的0x080486d1,是因为0x080486c0是第一次printf的参数，也就是打印”Type Hex String:”字符串的地址，而0x080486d1才是第二个printf的字符串地址。这个地址怎么得到的？可以通过gdb单指令调试，其实汇编语言中就有，见上文汇编代码中注释的那一行。&lt;/p&gt;

&lt;p&gt;现在我们的目标是让test中的第二个printf输出0xdeadbeef，而不是程序中默认的1。&lt;/p&gt;

&lt;p&gt;首先，buf数组开的大小有12，但是系统并不检查边界(现在的gcc版本可能会有相关的处理机制),所以我们可以一直写，写多了，就把高地址的数据覆盖了。我们的目标至少要覆盖到printf的第二个参数，也就是上面栈帧图中红色的区域，当然上面多了一行，只是为了演示如果我们想，完全可以把整个栈都覆盖掉。&lt;/p&gt;

&lt;p&gt;现在的关键就是要写入什么数据，随便写肯定程序的eip都不知道运行到那去了。&lt;/p&gt;

&lt;p&gt;首先要保证第30行的数据不变，因为这里保存了函数返回后test的ebp。&lt;/p&gt;

&lt;p&gt;然后我们要绕过给val赋值为1，并用printf输出这一块，可以让getbuf返回后直接执行printf,所以要让eip直接返回到printf函数的指令，即将第29行的数据写为0x08048574，看上面的汇编代码可以知道，这里存放的就是printf的指令。&lt;/p&gt;

&lt;p&gt;现在可以直接执行printf了，剩下的就是设置参数了，第0个参数设置为0x080486d1,原因上文已经说过了，第1个参数就是输出的内容,应该是0xdeadbeef.&lt;/p&gt;

&lt;p&gt;ok,这就是我们需要注意的所有地方，至于从31到35行要填入什么数据就随意了，需要注意的是，由于一次填写2个字符，所以要将上述必须填的顺序逆序的输入，比如你想存0x12345678,输入的时候应该是78 56 34 12 。&lt;/p&gt;

&lt;p&gt;这样，就完成了一次缓冲区溢出攻击:)&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/csapp/deafbeef2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是，不再gdb下运行的时候，虽然也返回了0xdeadbeef,但是总是伴随着段错误。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/csapp/part_023.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;应该还是有改进的空间，下一步可以尝试在stack protector下的溢出攻击。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>tcpdump查看三次握手</title>
   <link href="http://username.github.io/blog/2012/04/06/tcpdump%E6%9F%A5%E7%9C%8B%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B"/>
   <updated>2012-04-06T13:51:57Z</updated>
   <id>http://username.github.io/blog/2012/04/06/tcpdump查看三次握手</id>
   <content type="html">&lt;p&gt;以前学TCP三次握手也就停留在知道有三个箭头的程度，现在借助tcpdump这个工具可以很清晰的看出TCP协议是怎么建立连接以及传输数据的。 我首先运行了UNP书上的TCP回射服务器的程序，让其在9889端口监听，然后用tcpdump程序来截取本机的9889端口的通信数据包。命令行如下：&lt;/p&gt;

&lt;p&gt;$ sudo tcpdump -i lo ‘port 9889 and tcp’ -X -s 0 -S&lt;/p&gt;

&lt;p&gt;具体tcpdump的命令参数可以通过man tcpdump得知，不过这里用的比较重要的就是-X和-S，-X表明当分析和打印时, tcpdump 会打印每个包的头部数据, 同时会以16进制和ASCII码形式打印出每个包的数据(但不包括连接层的头部).&lt;/p&gt;

&lt;p&gt;-S表明打印TCP 数据包的顺序号时, 使用绝对的顺序号, 而不是相对的顺序号.比如我第一次用tcpdump查看tcp的三次握手时发现第三次握手的ack=1,这个ack就是相对的，因为tcpdump只在SYN包中显示绝对顺序号，而非SYN包则显示相对的，为了便于观察，在抓包时都采用来绝对的顺序号。&lt;/p&gt;

&lt;p&gt;为了能看懂tcpdump输出的格式，首先要知道TCP/IP的数据封装，大体如下图所示：&lt;img alt=&quot;&quot; src=&quot;https://lh5.googleusercontent.com/AyzucSnu5AdElVtGL7WMJs7HT6QGTaiX8Qg6NYBX8dxfhvagZcinJDiW_srsYOmKT6mYFvkLeE533DYPLwXOM1R6rQ4Eo9zmgIcCqIRp08IIbfIFghM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图片来自&lt;a href=&quot;http://www2.meps.tp.edu.tw/documents/memo/TCP%EF%BC%8FIP%E6%A6%82%E8%AB%96/index.htm&quot;&gt;http://www2.meps.tp.edu.tw/documents/memo/TCP%EF%BC%8FIP%E6%A6%82%E8%AB%96/index.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上面命令-X参数限定了只截取上图中倒数第二个数据包，也就是只包含IP Header,TCP Header,Application Data.&lt;/p&gt;

&lt;p&gt;首先看IP Header的结构:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/tcpdump/image_thumb.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关于IP Header的结构，我还没有深入的学习，简单的字段解释如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Version:&amp;lt;4bits&amp;gt;&lt;/code&gt;,表明IP的版本，一般应该都是4或者6.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;IHL:&amp;lt;4bit&amp;gt;&lt;/code&gt;,Internet Header Length,表明IP头的长度，一个单位长度是32bit，上图中Options字段是非必须的，所以IP Header的长度最小是5x32bits.所以该字段最小值应该为5.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;Total Length:&amp;lt;16bits&amp;gt;&lt;/code&gt;,该字段表明了整个IP包的长度，包括IP Header,TCP Header和Application Data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;IP Source Address:&amp;lt;32bits&amp;gt;&lt;/code&gt;,源IP地址，图中的Adresse是德文的Address,这个IP Header的图和下面TCP Header的图都是从德文网站&lt;a href=&quot;http://www.trojaner-und-sicherheit.de/tcp-ip-schulung/sld106.htm&quot;&gt;http://www.trojaner-und-sicherheit.de/tcp-ip-schulung/sld106.htm&lt;/a&gt;上面找到的。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;IP Destionation Address:&amp;lt;32bits&amp;gt;&lt;/code&gt;,目的IP地址。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Options:可选字段，后面的Padding表示不够32bits要用0来补齐。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举例来说，我用tcpdump抓到了这样一个包：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;    &lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;05&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;36.631501&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; 
    &lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;seq&lt;/span&gt; &lt;span class='mi'&gt;4289908547&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;4289908560&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;ack&lt;/span&gt; &lt;span class='mi'&gt;2355231328&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
    &lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;2050&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28499978&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;28495907&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;13&lt;/span&gt;
    &lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;0041&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;f63&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;d52&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='nd'&gt;@.@..R....&lt;/span&gt;
    &lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf43&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa60&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;......&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;C&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='err'&gt;`&lt;/span&gt;
    &lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;8018&lt;/span&gt; &lt;span class='mi'&gt;0802&lt;/span&gt; &lt;span class='n'&gt;fe35&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0101&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;e00a&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='mf'&gt;5.&lt;/span&gt;&lt;span class='o'&gt;.........&lt;/span&gt;
    &lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;d023&lt;/span&gt; &lt;span class='mi'&gt;6865&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;c6c&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;f20&lt;/span&gt; &lt;span class='mi'&gt;776&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt; &lt;span class='mi'&gt;726&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='mi'&gt;647&lt;/span&gt;&lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='c'&gt;#hello.world~&lt;/span&gt;
    &lt;span class='mh'&gt;0x0040&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到第一个32bits的数据为4500，根据上面IP Header的定义，这个IP Header的长度为5，也就是5x32bits，将其整理出来如下：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;
&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;Ver&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;IHL&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;ToS&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mo'&gt;00&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Total&lt;/span&gt; &lt;span class='n'&gt;Length&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mo'&gt;0041&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt; 
&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;Identification&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;f63&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;F&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Fragment&lt;/span&gt; &lt;span class='n'&gt;Offset&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mo'&gt;000&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; 
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt; 
&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;TTL&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;40&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Protocol&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mo'&gt;06&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Header&lt;/span&gt; &lt;span class='n'&gt;Checksum&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;d52&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; 
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt; 
&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Source&lt;/span&gt; &lt;span class='n'&gt;Address&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; 
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt; 
&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Destination&lt;/span&gt; &lt;span class='n'&gt;Address&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; 
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是TCP Header的结构：&lt;a href=&quot;http://chaoswork.com/blog/wp-content/uploads/2012/04/image1.png&quot;&gt;&lt;img alt=&quot;image&quot; src=&quot;http://chaoswork.com/blog/wp-content/uploads/2012/04/image_thumb1.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Source Port:&amp;lt;16bits&amp;gt;&lt;/code&gt;,源端口&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;Destination Port:&amp;lt;16bits&amp;gt;&lt;/code&gt;,目的端口。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;Sequence Number:&amp;lt;32bits&amp;gt;&lt;/code&gt;,这个地方还有待研究，目前我是这样认为的，如果本TCP Header中的SYN(Synchronize sequence numbers)标志为0，则代表本TCP Header携带的数据第一个字节的序号；如果本TCP Header中的SYN标志为1，那么这个序号代表了ISN(initial sequence number)，也就是双方建立TCP连接时的初始序列号，那么本次TCP连接后在此方向上传输的第一个字节的编号应该为ISN+1.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;Acknowledge Number:&amp;lt;32bits&amp;gt;&lt;/code&gt;,这个字段仅当TCP Header中ACK标志为1时有效，代表了这个TCP Header的发送端所期望的下一个数据的序列号，与上文提到的Sequence Number配合使用。一旦两端通过TCP连接起来，那么这个字段应该总是有效的。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;Data Offset:&amp;lt;4bits&amp;gt;&lt;/code&gt;,与IP Header中的IHL类似，单位长度也是32bits，代表了TCP Header的长度，TCP Options也是可选的，但是一般都会存在，所以这个字段的最小值为5，但是一般都会大于5.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Options：不定长，每个选项的开始是1字节的kind字段，说明选项的类型。Kind=0:选项表结束（1字节）,Kind=1:无操作（1字节）,Kind=2：最大报文段长度（4字节）,Kind=3:窗口扩大因子（4字节）,Kind=8:时间戳（10字节）&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Data:终于，这个字段就是Application Data，我们要发送的数据就在这里。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同样是上面的包，TCP 段和其后紧跟的Data段的信息整理出来如下：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;
&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Source&lt;/span&gt; &lt;span class='n'&gt;Port&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Destination&lt;/span&gt; &lt;span class='n'&gt;Port&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;
&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Sequence&lt;/span&gt; &lt;span class='n'&gt;Number&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf43&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;
&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Acknowledgment&lt;/span&gt; &lt;span class='n'&gt;Number&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa60&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;
&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;DO&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;Reserved&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Flags&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;18&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Window&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;0802&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;
&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Checksum&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;fe35&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Urgent&lt;/span&gt; &lt;span class='n'&gt;Pointer&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;
&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;TCP&lt;/span&gt; &lt;span class='n'&gt;Options&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mo'&gt;0101&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;
&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;TCP&lt;/span&gt; &lt;span class='n'&gt;Options&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;e00a&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;
&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;TCP&lt;/span&gt; &lt;span class='n'&gt;Options&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;d023&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;
&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;Data&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;6865&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;c6c&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;f20&lt;/span&gt; &lt;span class='mi'&gt;776&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt; &lt;span class='mi'&gt;726&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='mi'&gt;647&lt;/span&gt;&lt;span class='n'&gt;e&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;
&lt;span class='o'&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面Data段的ascii码值为:”hello world~\n”&lt;/p&gt;

&lt;p&gt;我在本机上截获的数据包如下，这里我用黄色背景表示IP段，用绿色背景表示TCP段，没有背景则是数据段。蓝色的字体是我的注释。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;05&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;20.346307&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; 
&lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;seq&lt;/span&gt; &lt;span class='mi'&gt;4289908546&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;client&lt;/span&gt; &lt;span class='n'&gt;ISN&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;32792&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
&lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;mss&lt;/span&gt; &lt;span class='mi'&gt;16396&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;sackOK&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28495907&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;wscale&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;003&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;f61&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;d59&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&amp;lt;.&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='nd'&gt;@.@..Y....&lt;/span&gt;
&lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf42&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;......&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;B&lt;/span&gt;&lt;span class='o'&gt;....&lt;/span&gt;
&lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;a002&lt;/span&gt; &lt;span class='mi'&gt;8018&lt;/span&gt; &lt;span class='n'&gt;fe30&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0204&lt;/span&gt; &lt;span class='mi'&gt;400&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='mo'&gt;0402&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='mf'&gt;0.&lt;/span&gt;&lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='nd'&gt;@.....&lt;/span&gt;
&lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;d023&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0103&lt;/span&gt; &lt;span class='mo'&gt;0304&lt;/span&gt;&lt;span class='err'&gt;           &lt;/span&gt; &lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='c'&gt;#........&lt;/span&gt;
&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;05&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;20.346333&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;seq&lt;/span&gt; &lt;span class='mi'&gt;2355231327&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;server&lt;/span&gt; &lt;span class='n'&gt;ISN&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;ack&lt;/span&gt; &lt;span class='mi'&gt;4289908547&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;ack&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;client&lt;/span&gt; &lt;span class='n'&gt;ISN&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;32768&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
&lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;mss&lt;/span&gt; &lt;span class='mi'&gt;16396&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;sackOK&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28495907&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;28495907&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;wscale&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;003&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='n'&gt;cba&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&amp;lt;..&lt;/span&gt;&lt;span class='nd'&gt;@.@.&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;.....&lt;/span&gt;
&lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa5f&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf43&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;....&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;_&lt;/span&gt;&lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='n'&gt;C&lt;/span&gt;
&lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;a012&lt;/span&gt; &lt;span class='mi'&gt;8000&lt;/span&gt; &lt;span class='n'&gt;fe30&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0204&lt;/span&gt; &lt;span class='mi'&gt;400&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='mo'&gt;0402&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='mf'&gt;0.&lt;/span&gt;&lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='nd'&gt;@.....&lt;/span&gt;
&lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;d023&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;d023&lt;/span&gt; &lt;span class='mo'&gt;0103&lt;/span&gt; &lt;span class='mo'&gt;0304&lt;/span&gt;&lt;span class='err'&gt;           &lt;/span&gt; &lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='c'&gt;#...#....&lt;/span&gt;
&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;05&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;20.346347&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;ack&lt;/span&gt; &lt;span class='mi'&gt;2355231328&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;ack&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;server&lt;/span&gt; &lt;span class='n'&gt;ISN&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;2050&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
&lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28495907&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;28495907&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;&lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;0034&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;f62&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;d60&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='mf'&gt;4.&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='nd'&gt;@.@..&lt;/span&gt;&lt;span class='err'&gt;`&lt;/span&gt;&lt;span class='o'&gt;....&lt;/span&gt;
&lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf43&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa60&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;......&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;C&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='err'&gt;`&lt;/span&gt;
&lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;8010&lt;/span&gt; &lt;span class='mi'&gt;0802&lt;/span&gt; &lt;span class='n'&gt;fe28&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0101&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;d023&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;.........&lt;/span&gt;&lt;span class='c'&gt;#&lt;/span&gt;
&lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;d023&lt;/span&gt;&lt;span class='err'&gt;                               &lt;/span&gt; &lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='c'&gt;#&lt;/span&gt;
&lt;span class='c'&gt;#tcp 3 way handshake,可以看出，这3个包都没有包含数据，&lt;/span&gt;
&lt;span class='c'&gt;#由于第一次和第二次握手含有最大报文长度而第三次只含有时间戳&lt;/span&gt;
&lt;span class='c'&gt;#所以TCP Header的长度不同。&lt;/span&gt;

&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;05&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;36.631501&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;seq&lt;/span&gt; &lt;span class='mi'&gt;4289908547&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;4289908560&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;ack&lt;/span&gt; &lt;span class='mi'&gt;2355231328&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
&lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;2050&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28499978&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;28495907&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;13&lt;/span&gt;
&lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;0041&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;f63&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;d52&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='nd'&gt;@.@..R....&lt;/span&gt;
&lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf43&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa60&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;......&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;C&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='err'&gt;`&lt;/span&gt;
&lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;8018&lt;/span&gt; &lt;span class='mi'&gt;0802&lt;/span&gt; &lt;span class='n'&gt;fe35&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0101&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;e00a&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='mf'&gt;5.&lt;/span&gt;&lt;span class='o'&gt;.........&lt;/span&gt;
&lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;d023&lt;/span&gt; &lt;span class='mi'&gt;6865&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;c6c&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;f20&lt;/span&gt; &lt;span class='mi'&gt;776&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt; &lt;span class='mi'&gt;726&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='mi'&gt;647&lt;/span&gt;&lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='c'&gt;#hello.world~&lt;/span&gt;
&lt;span class='mh'&gt;0x0040&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='err'&gt;                                      &lt;/span&gt; &lt;span class='o'&gt;.&lt;/span&gt;
&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;05&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;36.631964&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;ack&lt;/span&gt; &lt;span class='mi'&gt;4289908560&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;2048&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28499979&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;28499978&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
&lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;0034&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='n'&gt;a43&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;127&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;C&lt;/span&gt;&lt;span class='nd'&gt;@.@.......&lt;/span&gt;
&lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa60&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf50&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;....&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='err'&gt;`&lt;/span&gt;&lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='n'&gt;P&lt;/span&gt;
&lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;8010&lt;/span&gt; &lt;span class='mi'&gt;0800&lt;/span&gt; &lt;span class='n'&gt;fe28&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0101&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;e00b&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;..........&lt;/span&gt;
&lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;e00a&lt;/span&gt;&lt;span class='err'&gt;                               &lt;/span&gt; &lt;span class='o'&gt;....&lt;/span&gt;
&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;05&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;36.632024&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;seq&lt;/span&gt; &lt;span class='mi'&gt;2355231328&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;2355231341&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;ack&lt;/span&gt; &lt;span class='mi'&gt;4289908560&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;2048&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
&lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28499979&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;28499978&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;13&lt;/span&gt;
&lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;0041&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='n'&gt;a44&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;1271&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='n'&gt;A&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;D&lt;/span&gt;&lt;span class='nd'&gt;@.@..q....&lt;/span&gt;
&lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa60&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf50&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;....&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='err'&gt;`&lt;/span&gt;&lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='n'&gt;P&lt;/span&gt;
&lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;8018&lt;/span&gt; &lt;span class='mi'&gt;0800&lt;/span&gt; &lt;span class='n'&gt;fe35&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0101&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;e00b&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='mf'&gt;5.&lt;/span&gt;&lt;span class='o'&gt;.........&lt;/span&gt;
&lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;e00a&lt;/span&gt; &lt;span class='mi'&gt;6865&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;c6c&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;f20&lt;/span&gt; &lt;span class='mi'&gt;776&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt; &lt;span class='mi'&gt;726&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='mi'&gt;647&lt;/span&gt;&lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;....&lt;/span&gt;&lt;span class='n'&gt;hello&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;world&lt;/span&gt;&lt;span class='o'&gt;~&lt;/span&gt;
&lt;span class='mh'&gt;0x0040&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='err'&gt;                                      &lt;/span&gt; &lt;span class='o'&gt;.&lt;/span&gt;
&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;05&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;36.632078&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;ack&lt;/span&gt; &lt;span class='mi'&gt;2355231341&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;2050&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28499979&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;28499979&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
&lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;0034&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;f64&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;d5e&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='mf'&gt;4.&lt;/span&gt;&lt;span class='n'&gt;d&lt;/span&gt;&lt;span class='nd'&gt;@.@..&lt;/span&gt;&lt;span class='o'&gt;^....&lt;/span&gt;
&lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf50&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa6d&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;......&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;
&lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;8010&lt;/span&gt; &lt;span class='mi'&gt;0802&lt;/span&gt; &lt;span class='n'&gt;fe28&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0101&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;e00b&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;..........&lt;/span&gt;
&lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;e00b&lt;/span&gt;&lt;span class='err'&gt;                               &lt;/span&gt; &lt;span class='o'&gt;....&lt;/span&gt;
&lt;span class='c'&gt;#4,5,6,7这4个包表示client向server发送了&amp;quot;hello world~\n&amp;quot;,&lt;/span&gt;
&lt;span class='c'&gt;#然后server回射给client&lt;/span&gt;

&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;06&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;11.448332&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;seq&lt;/span&gt; &lt;span class='mi'&gt;4289908560&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;4289908587&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;ack&lt;/span&gt; &lt;span class='mi'&gt;2355231341&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;2050&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
&lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28508683&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;28499979&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;27&lt;/span&gt;
&lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;004&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;f65&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;d42&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='n'&gt;O&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='nd'&gt;@.@..B....&lt;/span&gt;
&lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf50&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa6d&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;......&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;
&lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;8018&lt;/span&gt; &lt;span class='mi'&gt;0802&lt;/span&gt; &lt;span class='n'&gt;fe43&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0101&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b3&lt;/span&gt; &lt;span class='mo'&gt;020&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='n'&gt;C&lt;/span&gt;&lt;span class='o'&gt;..........&lt;/span&gt;
&lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b2&lt;/span&gt; &lt;span class='n'&gt;e00b&lt;/span&gt; &lt;span class='mi'&gt;6162&lt;/span&gt; &lt;span class='mi'&gt;6364&lt;/span&gt; &lt;span class='mi'&gt;6566&lt;/span&gt; &lt;span class='mi'&gt;6768&lt;/span&gt; &lt;span class='mi'&gt;696&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;b6c&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;....&lt;/span&gt;&lt;span class='n'&gt;abcdefghijkl&lt;/span&gt;
&lt;span class='mh'&gt;0x0040&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;d6e&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;f70&lt;/span&gt; &lt;span class='mi'&gt;7172&lt;/span&gt; &lt;span class='mi'&gt;7374&lt;/span&gt; &lt;span class='mi'&gt;7576&lt;/span&gt; &lt;span class='mi'&gt;7778&lt;/span&gt; &lt;span class='mi'&gt;797&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='err'&gt;   &lt;/span&gt; &lt;span class='n'&gt;mnopqrstuvwxyz&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;
&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;9&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;06&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;11.448524&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;seq&lt;/span&gt; &lt;span class='mi'&gt;2355231341&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;2355231368&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;ack&lt;/span&gt; &lt;span class='mi'&gt;4289908587&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;2048&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
&lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28508683&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;28508683&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;27&lt;/span&gt;
&lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;004&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='n'&gt;a45&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;1262&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='n'&gt;O&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='nd'&gt;@.@..b....&lt;/span&gt;
&lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa6d&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf6b&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;....&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;
&lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;8018&lt;/span&gt; &lt;span class='mi'&gt;0800&lt;/span&gt; &lt;span class='n'&gt;fe43&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0101&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b3&lt;/span&gt; &lt;span class='mo'&gt;020&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='n'&gt;C&lt;/span&gt;&lt;span class='o'&gt;..........&lt;/span&gt;
&lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b3&lt;/span&gt; &lt;span class='mo'&gt;020&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='mi'&gt;6162&lt;/span&gt; &lt;span class='mi'&gt;6364&lt;/span&gt; &lt;span class='mi'&gt;6566&lt;/span&gt; &lt;span class='mi'&gt;6768&lt;/span&gt; &lt;span class='mi'&gt;696&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;b6c&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;....&lt;/span&gt;&lt;span class='n'&gt;abcdefghijkl&lt;/span&gt;
&lt;span class='mh'&gt;0x0040&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;d6e&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='n'&gt;f70&lt;/span&gt; &lt;span class='mi'&gt;7172&lt;/span&gt; &lt;span class='mi'&gt;7374&lt;/span&gt; &lt;span class='mi'&gt;7576&lt;/span&gt; &lt;span class='mi'&gt;7778&lt;/span&gt; &lt;span class='mi'&gt;797&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='err'&gt;   &lt;/span&gt; &lt;span class='n'&gt;mnopqrstuvwxyz&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;
&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;06&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;11.448578&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;ack&lt;/span&gt; &lt;span class='mi'&gt;2355231368&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;2050&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28508683&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;28508683&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;0034&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;f66&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;d5c&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='mf'&gt;4.&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='nd'&gt;@.@..&lt;/span&gt;\&lt;span class='o'&gt;....&lt;/span&gt;
&lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf6b&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa88&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;......&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;
&lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;8010&lt;/span&gt; &lt;span class='mi'&gt;0802&lt;/span&gt; &lt;span class='n'&gt;fe28&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0101&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b3&lt;/span&gt; &lt;span class='mo'&gt;020&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;..........&lt;/span&gt;
&lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b3&lt;/span&gt; &lt;span class='mo'&gt;020&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='err'&gt;                               &lt;/span&gt; &lt;span class='o'&gt;....&lt;/span&gt;
&lt;span class='c'&gt;#8,9,10包的功能和4,5,6,7类似，表示client向server发送了&lt;/span&gt;
&lt;span class='c'&gt;#&amp;quot;abcdefghijklmnopqrstuvwxyz\n&amp;quot;,然后server回射给client,&lt;/span&gt;
&lt;span class='c'&gt;#但是这里第9个包的功能相当于5,6包的合并，为什么会出现这种情况？有待考证。&lt;/span&gt;
&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;11&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;06&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;14.752733&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;F&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;seq&lt;/span&gt; &lt;span class='mi'&gt;4289908587&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;ack&lt;/span&gt; &lt;span class='mi'&gt;2355231368&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;2050&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
&lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28509509&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;28508683&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;0034&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;f67&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;d5b&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='mf'&gt;4.&lt;/span&gt;&lt;span class='n'&gt;g&lt;/span&gt;&lt;span class='nd'&gt;@.@..&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;....&lt;/span&gt;
&lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf6b&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa88&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;......&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;
&lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;8011&lt;/span&gt; &lt;span class='mi'&gt;0802&lt;/span&gt; &lt;span class='n'&gt;fe28&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0101&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b3&lt;/span&gt; &lt;span class='mo'&gt;0545&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;.........&lt;/span&gt;&lt;span class='n'&gt;E&lt;/span&gt;
&lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b3&lt;/span&gt; &lt;span class='mo'&gt;020&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='err'&gt;                               &lt;/span&gt; &lt;span class='o'&gt;....&lt;/span&gt;
&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;12&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;06&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;14.753693&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;F&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;seq&lt;/span&gt; &lt;span class='mi'&gt;2355231368&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;ack&lt;/span&gt; &lt;span class='mi'&gt;4289908588&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;2048&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
&lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28509509&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;28509509&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;0034&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='n'&gt;a46&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;127&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;F&lt;/span&gt;&lt;span class='nd'&gt;@.@..&lt;/span&gt;&lt;span class='o'&gt;|....&lt;/span&gt;
&lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa88&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf6c&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;....&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;
&lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;8011&lt;/span&gt; &lt;span class='mi'&gt;0800&lt;/span&gt; &lt;span class='n'&gt;fe28&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0101&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b3&lt;/span&gt; &lt;span class='mo'&gt;0545&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;.........&lt;/span&gt;&lt;span class='n'&gt;E&lt;/span&gt;
&lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b3&lt;/span&gt; &lt;span class='mo'&gt;0545&lt;/span&gt;&lt;span class='err'&gt;                               &lt;/span&gt; &lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='n'&gt;E&lt;/span&gt;
&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;13&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;06&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mf'&gt;14.753727&lt;/span&gt; &lt;span class='n'&gt;IP&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;54504&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;localhost&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;9889&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;Flags&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;ack&lt;/span&gt; &lt;span class='mi'&gt;2355231369&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;win&lt;/span&gt; &lt;span class='mi'&gt;2050&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;options&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;nop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;TS&lt;/span&gt; &lt;span class='n'&gt;val&lt;/span&gt; &lt;span class='mi'&gt;28509509&lt;/span&gt; &lt;span class='n'&gt;ecr&lt;/span&gt; &lt;span class='mi'&gt;28509509&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; 
&lt;span class='n'&gt;length&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='mh'&gt;0x0000&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;4500&lt;/span&gt; &lt;span class='mo'&gt;0034&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;f68&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt; &lt;span class='mi'&gt;4006&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='n'&gt;d5a&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='n'&gt;E&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;&lt;span class='mf'&gt;4.&lt;/span&gt;&lt;span class='n'&gt;h&lt;/span&gt;&lt;span class='nd'&gt;@.@..Z....&lt;/span&gt;
&lt;span class='mh'&gt;0x0010&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='n'&gt;f00&lt;/span&gt; &lt;span class='mo'&gt;0001&lt;/span&gt; &lt;span class='n'&gt;d4e8&lt;/span&gt; &lt;span class='mi'&gt;26&lt;/span&gt;&lt;span class='n'&gt;a1&lt;/span&gt; &lt;span class='n'&gt;ffb2&lt;/span&gt; &lt;span class='n'&gt;cf6c&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='n'&gt;c61&lt;/span&gt; &lt;span class='n'&gt;fa89&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;......&amp;amp;....&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='o'&gt;..&lt;/span&gt;
&lt;span class='mh'&gt;0x0020&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mi'&gt;8010&lt;/span&gt; &lt;span class='mi'&gt;0802&lt;/span&gt; &lt;span class='n'&gt;fe28&lt;/span&gt; &lt;span class='mo'&gt;0000&lt;/span&gt; &lt;span class='mo'&gt;0101&lt;/span&gt; &lt;span class='mi'&gt;080&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b3&lt;/span&gt; &lt;span class='mo'&gt;0545&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='o'&gt;.....&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;.........&lt;/span&gt;&lt;span class='n'&gt;E&lt;/span&gt;
&lt;span class='mh'&gt;0x0030&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt; &lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='n'&gt;b3&lt;/span&gt; &lt;span class='mo'&gt;0545&lt;/span&gt;&lt;span class='err'&gt;                               &lt;/span&gt; &lt;span class='o'&gt;...&lt;/span&gt;&lt;span class='n'&gt;E&lt;/span&gt;

&lt;span class='c'&gt;#11,12,13包是关闭TCP的连接，理论上来说这里应该有4个包，&lt;/span&gt;
&lt;span class='c'&gt;#因为需要4次握手才能关闭双方的TCP连接。这里我是这样理解的：&lt;/span&gt;
&lt;span class='c'&gt;#之所以4次握手，是因为当client发送FIN给server后，&lt;/span&gt;
&lt;span class='c'&gt;#表示client将不会再有数据发送过来，但是server还可能发送数据给client，&lt;/span&gt;
&lt;span class='c'&gt;#比如telnet一个bbs，退出的时候可能跟你说句Goodbye然后才server才断开连接，&lt;/span&gt;
&lt;span class='c'&gt;#这时候抓的包应该是4次，但是这里client断开后server也立刻断开了，&lt;/span&gt;
&lt;span class='c'&gt;#所以server的ack和FIN一起发送了。这只是我的猜想，还有待进一步验证。&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从这里可以看出tcpdump功能的强大。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Unix Network Programming 读书笔记1:daytimetcp注解</title>
   <link href="http://username.github.io/blog/2011/12/30/unix-network-programming-study-note-l"/>
   <updated>2011-12-30T08:17:44Z</updated>
   <id>http://username.github.io/blog/2011/12/30/unix-network-programming-study-note-l</id>
   <content type="html">&lt;p&gt;最近在看Stevens大师的《Unix Network Programming：V1》.虽然已经写的十分清晰，但是有些地方对于我这样的新手还是很吃力，可能第一章只是进行介绍，详细讲解在后面。&lt;br /&gt;下面是我第一章的学习笔记。&lt;br /&gt;环境编译：&lt;br /&gt;由于本书已经有第三版，所以我到网上下载了第三版的源码，README已经写的很清楚了，整个编译过程轻松加愉快。其实主要是为了生成libunp.a这个库文件。&lt;br /&gt;简单的时间客户端代码&lt;br /&gt;daytimetcpcli.c&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='cp'&gt;#include &amp;quot;unp.h&amp;quot;&lt;/span&gt;
&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;main&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;argc&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;argv&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;sockfd&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='n'&gt;recvline&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;MAXLINE&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;sockaddr_in&lt;/span&gt; &lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;argc&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;err_quit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;usage: a.out &amp;lt;IPaddress&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;sockfd&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;socket&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;AF_INET&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;SOCK_STREAM&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;err_sys&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;socket error&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='n'&gt;bzero&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;sizeof&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;
    &lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;sin_family&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;AF_INET&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;sin_port&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;htons&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;13&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='cm'&gt;/* daytime server */&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;inet_pton&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;AF_INET&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;argv&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;sin_addr&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;err_quit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;inet_pton error for %s&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;argv&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;connect&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;sockfd&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;SA&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;sizeof&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;err_sys&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;connect error&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;read&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;sockfd&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;recvline&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;MAXLINE&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='n'&gt;recvline&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='cm'&gt;/* null terminate */&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;fputs&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;recvline&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;stdout&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;EOF&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='n'&gt;err_sys&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;fputs error&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;err_sys&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;read error&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='n'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只有27行，麻雀虽小，五脏俱全。下面进行详细的介绍。&lt;br /&gt;第1行，包含unp.h的头文件，这个头文件是作者自己写的，这里面包含了诸多的系统头文件以及网U络编程所需要的头文件。&lt;br /&gt;第5行，sockfd,全称应该是socket file descriptor，用整形表示，是用来保存socket函数返回值，其余的socket相关操作都要通过这个文件描述符来找到我们生成的socket。n用来保存后面read函数读到的字符流的长度。&lt;br /&gt;第6行，recvline，用来保存字符串。&lt;br /&gt;第7行，servaddr，是个sockaddr_in类型的结构体，书中整个结构体声明如下：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;in_addr&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='kt'&gt;in_addr_t&lt;/span&gt; &lt;span class='n'&gt;s_addr&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//32bit表示的ip地址，一个unsigned int&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;sockaddr_in&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='kt'&gt;uint8_t&lt;/span&gt; &lt;span class='n'&gt;sin_len&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//OSI协议的支持&lt;/span&gt;
    &lt;span class='kt'&gt;sa_family_t&lt;/span&gt; &lt;span class='n'&gt;sin_family&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//协议族，这里是AF_INET&lt;/span&gt;
    &lt;span class='kt'&gt;in_port_t&lt;/span&gt; &lt;span class='n'&gt;sin_port&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//16bit端口&lt;/span&gt;
    &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;in_addr&lt;/span&gt; &lt;span class='n'&gt;sin_addr&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//ipv4地址,32bit&lt;/span&gt;
    &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='n'&gt;sin_zero&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt; &lt;span class='c1'&gt;//为了和sockaddr结构大小一样进行的冗余数据&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;sockaddr&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='kt'&gt;uint8_t&lt;/span&gt; &lt;span class='n'&gt;sa_len&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='kt'&gt;sa_family_t&lt;/span&gt; &lt;span class='n'&gt;sa_family&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='n'&gt;sa_data&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;14&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt; &lt;span class='c1'&gt;//14字节的协议&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于作者采用的是通用的unix协议，ubuntu等linux版本中有了一些变化，但是仍然遵循POSIX标准。&lt;!-- more --&gt;&lt;br /&gt;ubuntu中是这个样子的：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='cp'&gt;#define __SOCKADDR_COMMON(sa_prefix) &lt;/span&gt;
&lt;span class='kt'&gt;sa_family_t&lt;/span&gt; &lt;span class='n'&gt;sa_prefix&lt;/span&gt;&lt;span class='err'&gt;##&lt;/span&gt;&lt;span class='n'&gt;family&lt;/span&gt; 
&lt;span class='c1'&gt;//宏定义的函数，##代表字符连接，比如下面代码中的__SOCKADDR_COMMON (sin_);就相当于sin_family_t sin_family;&lt;/span&gt;
 
&lt;span class='cm'&gt;/* Internet address. */&lt;/span&gt;
&lt;span class='k'&gt;typedef&lt;/span&gt; &lt;span class='kt'&gt;uint32_t&lt;/span&gt; &lt;span class='kt'&gt;in_addr_t&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;in_addr&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
     &lt;span class='kt'&gt;in_addr_t&lt;/span&gt; &lt;span class='n'&gt;s_addr&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='cm'&gt;/* &lt;/span&gt;
&lt;span class='cm'&gt;Structure describing an Internet socket address. */&lt;/span&gt;
&lt;span class='k'&gt;struct&lt;/span&gt; 
&lt;span class='n'&gt;sockaddr_in&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
     &lt;span class='n'&gt;__SOCKADDR_COMMON&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;sin_&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
 
    &lt;span class='kt'&gt;in_port_t&lt;/span&gt; &lt;span class='n'&gt;sin_port&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='cm'&gt;/* Port number. */&lt;/span&gt;
    &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;in_addr&lt;/span&gt; &lt;span class='n'&gt;sin_addr&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='cm'&gt;/* Internet address. */&lt;/span&gt;
    &lt;span class='cm'&gt;/* Pad to size of `struct sockaddr&amp;#39;. */&lt;/span&gt;
    &lt;span class='kt'&gt;unsigned&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='n'&gt;sin_zero&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='k'&gt;sizeof&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;sockaddr&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; 
    &lt;span class='n'&gt;__SOCKADDR_COMMON_SIZE&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; 
    &lt;span class='k'&gt;sizeof&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;in_port_t&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; 
    &lt;span class='k'&gt;sizeof&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;in_addr&lt;/span&gt;&lt;span class='p'&gt;)];&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='cm'&gt;/* Structure describing a generic socket &lt;/span&gt;
&lt;span class='cm'&gt;address. */&lt;/span&gt;
&lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;sockaddr&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
     &lt;span class='n'&gt;__SOCKADDR_COMMON&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;sa_&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='cm'&gt;/* Common data: address family and length. */&lt;/span&gt;
     &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='n'&gt;sa_data&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;14&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt; &lt;span class='cm'&gt;/* Address data. */&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看出书中sockaddr.sa_len和sockaddr_in.sin_len在ubuntu的版本中被去掉了。其余的结构都是一样的。&lt;br /&gt;sockaddr_in是IPv4套接口地址的结构，也叫”Internet socket address structure”，POSIX标准中要求其必须含有3个成员，sin_family,sin_port和sin_addr，后两个我们已经知道了他们的大小，sin_family的类型为unsiged short，可能会随着操作系统的不同会有所改变。&lt;br /&gt;第10行，socket函数&lt;br /&gt;用来创建一个新的socket，如果成功，则返回socket的文件描述符，如果失败，则可以根据返回的负数来查询相应的错误。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='cm'&gt;/* Create a new socket of type TYPE in domain DOMAIN, using protocol &lt;/span&gt;
&lt;span class='cm'&gt;PROTOCOL. If PROTOCOL is zero, one is chosen automatically. &lt;/span&gt;
&lt;span class='cm'&gt;Returns a file descriptor for the new socket, or -1 for errors. &lt;/span&gt;
&lt;span class='cm'&gt;*/&lt;/span&gt;
&lt;span class='k'&gt;extern&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;socket&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;__domain&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;__type&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;__protocol&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;__THROW&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;domain参数表示通信的域，一般是指定通信的协议族，比如PF_INET/AF_INET表示IPv4协议，PF_INET6/AF_INET6表示IPv6协议，PF_UNIX/PF_LOCAL/AF_UNIX/AF_LOCAL UNIX表示进程通信协议；type表示socket的类型，比如SOCK_STREAM 提供双向连续且可信赖的数据流，即TCP，SOCK_DGRAM 使用不连续不可信赖的数据包连接，UDP；protocol指定在socket中使用的特定的协议。一般来讲，只存在一个单独的协议来支持给定的协议族中特定的socket类型，&lt;br /&gt;在这种情况下protocol可以用0来代表默认值。然而，有可能很多协议都会存在，在这种情况下特定的协议必须在这种方式下指定。我去源码中找了一下，发现了下面的协议编号。可以根据网络的环境进行选择。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;    &lt;span class='cm'&gt;/* Standard well-defined IP protocols. */&lt;/span&gt;
    &lt;span class='k'&gt;enum&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_IP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/*     Dummy protocol for TCP */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_ICMP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* Internet Control Message     Protocol */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_IGMP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* Internet Group Management Protocol     */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_IPIP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* IPIP tunnels (older KA9Q tunnels use 94)     */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_TCP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* Transmission Control Protocol */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_EGP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* Exterior Gateway Protocol */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_PUP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;12&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* PUP protocol */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_UDP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;17&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* User Datagram Protocol */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_IDP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;22&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* XNS IDP protocol */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_DCCP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;33&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* Datagram Congestion Control Protocol */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_RSVP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;46&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* RSVP protocol */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_GRE&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;47&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* Cisco GRE tunnels (rfc 1701,1702) */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_IPV6&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;41&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* IPv6-in-IPv4 tunnelling */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_ESP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;50&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* Encapsulation Security Payload protocol */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_AH&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;51&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* Authentication Header protocol*/&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_BEETPH&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;94&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* IP option pseudo header for BEET */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_PIM&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;103&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* Protocol Independent Multicast */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_COMP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;108&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* Compression Header protocol */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_SCTP&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;132&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* Stream Control Transport Protocol */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_UDPLITE&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;136&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* UDP-Lite (RFC 3828) */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_RAW&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;255&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='cm'&gt;/* Raw IP packets */&lt;/span&gt;
    &lt;span class='n'&gt;IPPROTO_MAX&lt;/span&gt;
    &lt;span class='p'&gt;};&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第12行，bzero函数不知道是不是标准c的一部分，这个函数就是给一段字符串赋0值，比如&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='n'&gt;bzero&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;sizeof&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;&lt;span class='c1'&gt;//相当于memset(s,0,sizeof(s));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这一行代码的作用是将servaddr中的内容全部置零。&lt;br /&gt;第13行，指定通信地址的协议族。&lt;br /&gt;第14行，指定通信地址的端口。这里有个htons函数，和这个函数类似的函数还有htonl,ntohs,ntohl,这一系列函数中，h代表host，也就是主机，to是转换，n是network，网络，l代表long，s代表short，这里的host和network应该怎么理解，这其实牵扯到主机字节顺序(Host Byte Order)和网络字节顺序(Network Byte Order)这两个概念有关。现在的CPU有两大派系，PowerPC系列CPU和Intel的x86系列CPU。PowerPC系列采用big endian方式存储数据，而x86系列则采用little endian方式存储数据。Big-Endian表示高字节存放在最后(Big End first)，Little-Endian表示低字节放在最后(Litter End first)，举例来说：比如一个数字0x12345678,Big-Endian形式下这4个字节在内存中存放的顺序是&lt;br /&gt;|12|34|56|78|&lt;br /&gt;而Little-Endian形式的为&lt;br /&gt;|78|56|34|12|&lt;br /&gt;网络上的传输采用的是Big-Endian类型的，所以将本地的数字在进行网络传输之前要先进行转换，利用的就是上面提到的几个函数。&lt;br /&gt;第15行，赋值通信的ip地址。这里有个函数&lt;code&gt;inet_pton(int family,const char * strptr,void * addrptr);&lt;/code&gt;就是将点分十进制串转换成网络字节序二进制值，同样要指定下协议族。&lt;br /&gt;第17行，&lt;code&gt;connect(sockfd,(SA*)&amp;amp;servaddr,sizeof(servaddr))&lt;/code&gt;，建立一个指定地址的连接。连接的服务器地址为servaddr。这里先给出它的声明&lt;code&gt;int connect(int sockfdFD,struct sockaddr*,int addrlength);&lt;/code&gt;&lt;br /&gt;这里就有一个问题，我们是把一个sockaddr_in类型的数据强制转换成了sockaddr类型。其实sockaddr的存储结构和sockaddr_in的存储结构是一样的，sockaddr是通用套接口地址结构(Generic Socket Address Structure)，而sockaddr_in可以看作是sockaddr的一个子集，至于后面的in的含义，我猜是internet的意思。这也解释了为什么sockaddr_in中会有冗余的数据，就是为了将结构体的大小设置成和sockaddr相等。而sockaddr.sa_data中数据可以看作是一种协议地址，不同协议所会有差别，这本书主要讲Internet协议。&lt;br /&gt;第19行，read函数其实是系统函数，从指定的文件读取数据，这里的文件描述符是创建socket时返回的描述符，也就是从网络读取。这也反映了在Unix系统中一切都是文件的思想。&lt;br /&gt;剩下的内容都很容易理解了，都是写基本的C语言的语法。&lt;br /&gt;上面的文件只是一个获取服务器时间的客户端代码，那么服务器端肯定要首先有这个服务，服务器端的代码如下：&lt;/p&gt;

&lt;p&gt;daytimetcpsrv.c&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='cp'&gt;#include &amp;quot;unp.h&amp;quot; &lt;/span&gt;
&lt;span class='cp'&gt;#include &amp;lt;time.h&amp;gt; &lt;/span&gt;
&lt;span class='kt'&gt;int&lt;/span&gt; 
&lt;span class='nf'&gt;main&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;argc&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;argv&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; 
&lt;span class='p'&gt;{&lt;/span&gt; 
    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;listenfd&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;connfd&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; 
    &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;sockaddr_in&lt;/span&gt; &lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; 
    &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='n'&gt;buff&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;MAXLINE&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt; 
    &lt;span class='kt'&gt;time_t&lt;/span&gt; &lt;span class='n'&gt;ticks&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; 
    &lt;span class='n'&gt;listenfd&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;Socket&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;AF_INET&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;SOCK_STREAM&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; 
    &lt;span class='n'&gt;bzero&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;sizeof&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt; 
    &lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;sin_family&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;AF_INET&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; 
    &lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;sin_addr&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;s_addr&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;htonl&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;INADDR_ANY&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; 
    &lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;sin_port&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;htons&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;13&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='cm'&gt;/* daytime server */&lt;/span&gt; 
    &lt;span class='n'&gt;Bind&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;listenfd&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;SA&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;sizeof&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;servaddr&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt; 
    &lt;span class='n'&gt;Listen&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;listenfd&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;LISTENQ&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; 
    &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='n'&gt;connfd&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;Accept&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;listenfd&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;SA&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nb'&gt;NULL&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nb'&gt;NULL&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; 
        &lt;span class='n'&gt;ticks&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;time&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;NULL&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; 
        &lt;span class='n'&gt;snprintf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;buff&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;sizeof&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;buff&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;%.24srn&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;ctime&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;ticks&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt; 
        &lt;span class='n'&gt;Write&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;connfd&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;buff&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;strlen&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;buff&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt; 
        &lt;span class='n'&gt;Close&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;connfd&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; 
    &lt;span class='p'&gt;}&lt;/span&gt; 
&lt;span class='p'&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码里面又出现了几个新函数。&lt;br /&gt;第15行，&lt;code&gt;int bind(int sockfd, const struct sockaddr *my_addr, socklen_t addrlen);&lt;/code&gt;函数，这个函数将socket绑定到网络地址，对于Internet来说，就是ip地址和端口号，每个socket在正常工作前都要进行这种绑定，那么现在看daytimetcpcli.c中的代码中并没有发现这个函数，原因是这样的，如果你没有手动进行绑定，那么系统会在运行的时候绑定本机地址和一个临时的端口，但是这对于客户来说用那个端口是无所谓的，但是如果服务器绑定了一个临时的端口，客户并不知道是那个端口，就没法连接了，所以服务端要绑定一个特定的端口，并和服务器说，你来连接这个端口，这样才会正常的工作。现在看这个socket绑定的地址和端口都是什么，端口是13，这个号理解，但是地址是INADDR_ANY，这是什么意思？因为有可能我的这个服务器有很多网卡，有很多IP地址，我想不管是那个IP地址接受到的数据，只要是通过13端口连接的，我都处理，这时候就可以通过绑定INADDR_ANY来实现。&lt;br /&gt;第16行，int listen(int sockfd, int backlog)，这个函数是使用主动连接套接口变为被连接套接口，使得一个进程可以接受其它进程的请求，从而成为一个服务器进程。因为当一个socket建立时，默认是主动的，也就是说准备去连接服务器的，但是调用listen后，会将这个socket变成被动，准备接受来自其他socket的连接。一般这个函数只会在服务器端出现。第二个参数是指内核为此套接字排队的最大连接个数。比如很多客户端尝试着连接这个socket，服务器无法快速的完成所有的请求，那么就会维护一个队列。这里指定的值为LISTENQ，这里为1024.&lt;br /&gt;第18行，&lt;code&gt;int accept(int sockfd, struct sockaddr* addr, socklen_t* len)&lt;/code&gt;，接受来自sockaddr的连接，如果成功则返回一个全新的文件描述符，代表与客户的网络连接，后面的代码可以看到怎么处理的这个新的文件描述符，需要注意的是，accept函数默认会阻塞进程，也就是说连接成功后程序才会往下执行。&lt;br /&gt;分析了这两个代码可以基本了解整个连接是怎么建立起来的了：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;服务器端建立一个标识为listenfd的套接字。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;将listenfd这个套接字绑定到13端口。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;将listenfd变成被动的socket接口。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;利用accept函数让listenfd这个套接字来等待客户的连接，服务器端阻塞。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;服务器建立标识为sockfd的socket，这个socket并没有手动绑定。系统会用本机地址和一个随机的端口对其绑定。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;将sockfd这个套接字通过connect与服务器地址相连接。如果连接成功，则read函数准备读取这个sockfd的数据，客户端阻塞。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;服务器端接收到请求，生成一个新的socket与客户端相连接connfd。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;服务器通过新生成的socket发送给客户端数据。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;客户端通过与服务器相连接的socket读取到了数据并显示，结束。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/unp/005_thumb.png&quot; /&gt; 其实是两台电脑通过socket进行了进程间通信，代码中是通过文件描述符来代表socket的，至于socket的结构以及怎么就能通过这个socket进行数据传输，这些内容有待研究。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://username.github.io/blog/2011/12/29/jekyll-introduction"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>http://username.github.io/blog/2011/12/29/jekyll-introduction</id>
   <content type="html">&lt;p&gt;This Jekyll introduction will outline specifically what Jekyll is and why you would want to use it. Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what_is_jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what_does_jekyll_do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system. Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll_is_not_blogging_software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why_should_i_care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;

&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;

&lt;li&gt;No internet connection required.&lt;/li&gt;

&lt;li&gt;Ability to publish via git.&lt;/li&gt;

&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;

&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;

&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how_jekyll_works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples. This information is not intended to specifically teach you how to do anything, rather it is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial_setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects. Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the_jekyll_application_base_format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt; Stores configuration data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt; This folder is for partial views.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt; This folder contains your dynamic content/posts. the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt; This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt; This folder is not part of the standard jekyll structure. The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll_configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here: (&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content_in_jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page. These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts_and_pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working_with_posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt; A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt; Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post’s YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy “set”. Example:&lt;/p&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;title :  Hello World
categories : [lessons, beginner]&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll. You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working_with_pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt; Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt; In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt; Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt; If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt; You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt; Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt; Generating a sitemap is good practice for SEO.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt; A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates_in_jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content. All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt; Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt; Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt; There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;. The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;subtemplates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they define another “root” layout/template within their YAML Front Matter. This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder. Includes are NOT templates, rather they are just code snippets that get included into templates. In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using_liquid_for_templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll. This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what_is_liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why_do_we_have_to_use_liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid_is_not_programmerfriendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code. The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation. What’s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; My personal stance is to not invest time trying to hack liquid. It’s really unnecessary &lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code) you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static_assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages. That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how_jekyll_parses_files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; This is done with textile or markdown.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt; All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt; These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax. Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting_files_for_parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;. Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty. This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;layout: post
category : pages
tags : [how-to, jekyll]&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;... contents ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block. The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining_layouts_for_posts_and_templates_parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into. If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt; That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how_jekyll_generates_the_final_static_files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website. The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata. At this stage your site is one big computed ruby object.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt; Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s). Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”. &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates and saving the final, static representation of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt; Because Jekyll computes the entire site in one fell swoop, each template is given access to a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;

&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap. You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does. As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next_steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href=&quot;&quot;&gt;&lt;/a&gt; or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>KMP算法小结</title>
   <link href="http://username.github.io/blog/2011/06/14/kmp%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93"/>
   <updated>2011-06-14T00:00:00+08:00</updated>
   <id>http://username.github.io/blog/2011/06/14/kmp算法小结</id>
   <content type="html">&lt;p&gt;主要看了&lt;a href=&quot;http://www.inf.fh-flensburg.de/lang/algorithmen/pattern/kmpen.htm&quot;&gt;这里&lt;/a&gt;，感觉讲的十分的不错，总结一下。&lt;/p&gt;

&lt;p&gt;首先声明要搜索的串为S,设长度为n，要匹配的串为M,设长度为m.&lt;/p&gt;

&lt;p&gt;先考虑暴力的算法，暴力的算法是遍历S的每一个字符，然后从这个字符开始和M串进行匹配。时间复杂度为O(nm).&lt;/p&gt;

&lt;p&gt;怎么在此基础上进行优化？假设现在从某个位置(设为s)开始和M串进行匹配，如果匹配不成功，暴力算法是从这个位置的下一个位置(s+1)进行匹配,直观上来说就是匹配的字符串向后“滑动”了一位。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/kmp/image_thumb.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图1&lt;/p&gt;

&lt;p&gt;能不能想办法让M向后移动的距离最大化？考虑最好的情况，如果和M匹配的S中的m个字符和M中的字符没有一个相等，那么能向右移动m位；考虑最坏的情况，比如上图，只能移动一位。&lt;/p&gt;

&lt;p&gt;而KMP就是在这里做文章，让M串向后“滑动”的距离最大化。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/kmp/image22_thumb.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图2&lt;/p&gt;

&lt;p&gt;考虑上面的图，M中灰色部分已经和S的灰色部分匹配上了，而灰色部分后一个字符不匹配，则现在M要向后滑动，假设一直向后滑动，直到如图位置又和S再一次匹配上了，那么从这里我们可以得到如下的结论：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A段字符串是M的一个前缀。&lt;/li&gt;

&lt;li&gt;B段字符串是M的一个后缀。&lt;/li&gt;

&lt;li&gt;A段字符串和B段字符串相等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样，如果暂时不考虑S，只看M的话，假设已经匹配的M的字串(即图中M中灰色部分)为subM，则subM有个【相等】的【前缀】和【后缀】。而且M在遇到不匹配的时候可以直接滑动到使subM的前缀和subM的后缀重合的地方。而M向后滑动的时候，第一次subM的前缀和后缀重合意味着此时这个相等的subM的前缀和后缀的长度是最大的。&lt;/p&gt;

&lt;p&gt;我们的任务就是要寻找subM的最长的前缀和后缀相等的串。&lt;/p&gt;

&lt;p&gt;知道了这一点，离KMP的真谛也就不远了。现在结合这上面的图模拟一下KMP算法的整个流程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;将S串和M串从第一个字符开始匹配；&lt;/li&gt;

&lt;li&gt;如果匹配成功，则subM即灰色部分增加；&lt;/li&gt;

&lt;li&gt;如果不成功，则M向后滑动使滑动后的subM的前缀和滑动前的subM的后缀重合，再进行匹配，如果还不成功，则再次滑动M，直到匹配成功或者M滑动到X处。如果到了X处，则从M串的起始位置进行匹配。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从上面的步骤可以知道，KMP的关键就是要知道当S串中的字符和M串中的字符不匹配时，S串要和M串中的哪个字符继续进行匹配。这个就是在利用状态机模型来解释KMP算法时的状态转移.&lt;/p&gt;

&lt;p&gt;KMP是通过一个定义了一个next数组，这个next数组保存了如果S中的字符和M中的字符不匹配时S要和M中的哪个字符重新进行匹配的坐标值。如图2中所示是例子，S中的X位置和M不匹配了，那么S要和M中A段后面的字符进行比较，从图中来看是M向后滑动了。&lt;/p&gt;

&lt;p&gt;换句话说，&lt;code&gt;next[i]&lt;/code&gt;总是保存了当&lt;code&gt;M[i]&lt;/code&gt;不匹配时要从&lt;code&gt;M[next[i]]&lt;/code&gt;处进行匹配，这个&lt;code&gt;M[next[i]]&lt;/code&gt;可能会匹配，如果还不匹配？那么可能会在&lt;code&gt;M[next[next[i]]]&lt;/code&gt;处匹配了。这里同时隐含着一个信息，就是i之前的一段字符和&lt;code&gt;next[i]&lt;/code&gt;之前的一段字符是相同的，也就是&lt;code&gt;M[0…i-1]&lt;/code&gt;相等的前缀和后缀。&lt;/p&gt;

&lt;p&gt;现在考虑&lt;code&gt;next[0],next[1]…next[i]&lt;/code&gt;都已经知道了，那么图示如下：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/kmp/image_thumb1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;设&lt;code&gt;j=next[i]&lt;/code&gt;，灰色部分表明这两段字符是相等的，如果i位置的字符和j位置的字符相等，那么&lt;code&gt;next[i+1]=j+1;&lt;/code&gt;因为前一段灰色部分和j位置的字符组成的字符串和后一段灰色的与i连接所形成的字符串是相等的。这正是前面对next数组的定义。如果不相等，则要找到从i开始包括i往前的一段字符串与从0开始的一段字符串相等，这样形成相等的前缀和后缀。所幸我们知道&lt;code&gt;next[next[i]]&lt;/code&gt;的值，因为&lt;code&gt;next[i]&lt;/code&gt;前面的字串也有最长的公共前缀和后缀，而这个公共的前缀与现在i以及往前形成的字串可能相等，这样一直向前找，如果找不到，则说明i位置的字符从来没有在之前出现过。&lt;/p&gt;

&lt;p&gt;这样求出来的next数组其实是从下标1开始的，因为下标0之前是个空串，下标1则对应着M串的第0个字符。我们设&lt;code&gt;next[0]=-1&lt;/code&gt;，仅仅是个标志而已，没有什么特殊的含义。&lt;/p&gt;

&lt;p&gt;那么根据前面所述，可以很容易的写出初始化next数组的代码&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;kmpGetNext&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;=-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;!=&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
        &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;知道了next数组的值，则和S串进行匹配则相对简单了，因为如果碰到不匹配的时候去查找next数组即可,直到找出和当前字符匹配的那个字符。如果找不到怎么办？找不到则会得到-1，也就是没有字符和他进行匹配，那么跳过这个字符，直接从下一个字符进行匹配即可。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;kmpSearch&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;!=&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
        &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;==&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='n'&gt;report&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看到上面的代码，两层循环，貌似这个代码并不是线性的，其实不然。外层循环了n次这个没有问题，关键是里面的while循环，这个循环的次数是多少并不好确定，然而考虑单单考虑j的值的变化，会发现第七行j增加1，而第6行j则减少，可能减少1，可能减少2，可能少的更多，但是&lt;code&gt;j&amp;lt;0&lt;/code&gt;时循环就终止了，也就是说j有n次增加的机会，会有多少次减少的机会？或者问j最多减少多少次？j减少的次数最多的时候，就是每次减少1，这样最多的会减少n次，也就是说第六行的循环最多会执行n次。平摊到每个循环，则执行次数为O(1)，所以kmpSearch的时间复杂度仍然是线性的O(n)，同理，kmpGetNext的时间复杂度为O(m).详情请参考&lt;a href=&quot;http://www.matrix67.com/blog/archives/115&quot;&gt;matrix67&lt;/a&gt;大牛的文章,下面有犀利的评论：&lt;/p&gt;

&lt;blockquote&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;倒数第七段&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;“…每一次执行while循环都会使j减小（但不能减成负的），而另外的改变j值的地方只有第五行。每次执行了这一行，j都只能加1；因此，整个过程中j最多加了n个1。于是，j最多只有n次减小的机会（j值减小的次数当然不能超过n，因为j永远是非负整数）。这告诉我们，while循环总共最多执行了n次。… ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;这里不大明白，整个过程中j是在回退然后前进的，假设第一遍比较回退一次，第二遍比较回退两次，于是总共加起来j减小和变大的次数都要大于n，不是吗？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;回复：我每年新交1个MM，我100年内会失恋200次吗？&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>计算几何初步</title>
   <link href="http://username.github.io/blog/2011/03/19/geometry-basic-1"/>
   <updated>2011-03-19T11:48:23Z</updated>
   <id>http://username.github.io/blog/2011/03/19/geometry-basic-1</id>
   <content type="html">&lt;p&gt;以前看到计算几何的题目就心虚，USACO的计算几何题目基本都跳过了，今天认真看了一下，发现其实计算几何没有想象中的那么难。本来做到USACO的fence3的题目，其中关键的一步就是求点到线段的最短距离，我本来想用解析几何做，也就是求出点到直线的距离，不过这样做我推导了半天，十分繁琐，后来想用海伦-秦九昭公式先算出三角形的面积，然后就出来了。但是看了TC的&lt;a href=&quot;http://www.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=alg_index&quot;&gt;Algorithm Tutorial&lt;/a&gt;，发现原来求解的过程这么的简单。。。&lt;/p&gt;

&lt;p&gt;首先介绍计算几何中的基本概念：&lt;/p&gt;

&lt;p&gt;1.向量，这个不用多说了，最基本的概念。&lt;/p&gt;

&lt;p&gt;2.点积(Dot Product),也叫数量积，是接受在实数R上的两个向量并返回一个实数值标量的二元运算。这里只考虑2维的向量，&lt;code&gt;A=[x1,y1],B=[x2,y2]&lt;/code&gt;,则&lt;code&gt;A*B=x1*x1+y1*y1;&lt;/code&gt;在欧式几何空间中，点积可形象的表示为&lt;code&gt;A*B=|A||B|cos(θ)&lt;/code&gt;,θ为两个向量之间的角度，图示如下。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/topcoder/image_thumb2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据这个公式，可以计算向量的夹角，所以，一般点积可以判断点之间的关系。如下图，如果&lt;code&gt;AB*AC&amp;lt;0&lt;/code&gt;,则说明&lt;code&gt;90&amp;lt;θ&amp;lt;27&lt;/code&gt;0,则说明C点在A的外面。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/topcoder/image_thumb3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据点积的概念可以写出计算点积的代码：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='kt'&gt;double&lt;/span&gt; &lt;span class='nf'&gt;dot&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;point&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;point&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;point&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='c1'&gt;//ab*ac&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='n'&gt;point&lt;/span&gt; &lt;span class='n'&gt;ab&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='n'&gt;point&lt;/span&gt; &lt;span class='n'&gt;ac&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;ab&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;ac&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;ab&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;ac&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.叉积(Cross Product),也叫向量积，需要注意的是ABxAC的结果也是一个向量，而且方向和这两个向量都垂直，由于只考虑平面，所以这个方向并不做考虑，有兴趣再看。&lt;/p&gt;

&lt;p&gt;设&lt;code&gt;AB=[x1,y1],AC=[x2,y2]&lt;/code&gt;,则&lt;code&gt;ABxAC=x1*y2-x2*y1&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ABxAC=|AB||AC|sin(θ)&lt;/code&gt;,这个结果在平面上可形象的表示为：&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/topcoder/image_thumb4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个平行四边形的面积，当然是不考虑其方向。&lt;/p&gt;

&lt;p&gt;同理，叉积的代码如下：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='kt'&gt;double&lt;/span&gt; &lt;span class='nf'&gt;cross&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;point&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;point&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;point&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='c1'&gt;//abXac&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='n'&gt;point&lt;/span&gt; &lt;span class='n'&gt;ab&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='n'&gt;point&lt;/span&gt; &lt;span class='n'&gt;ac&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;ab&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;ac&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;ab&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;ac&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.点到线段的距离，点到直线的最短距离无非就在点和线段上的3个点确定，两个端点和点到这条线段直线的垂线相交的点，当然，如果相交的点不在线段上，则最短距离就是两个点中的一个，否则就是点到这条直线的最短距离。&lt;/p&gt;

&lt;p&gt;可以通过点积来判断点和线段的相对位置，并且利用叉积计算出点到直线的最短距离,比如上图2，ABxAC为一个平行四边形的面积，而这个面积又等于&lt;code&gt;|AB|*h&lt;/code&gt;,h就是C点到AB所在直线的最短距离。代码如下：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;&lt;span class='kt'&gt;double&lt;/span&gt; &lt;span class='nf'&gt;Dist2Seg&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;point&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;segment&lt;/span&gt; &lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pa&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='o'&gt;==&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pb&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pa&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='o'&gt;==&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pb&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;dist&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pa&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
 
    &lt;span class='kt'&gt;double&lt;/span&gt; &lt;span class='n'&gt;d&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;abs&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;cross&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pa&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pb&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='n'&gt;dist&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pa&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pb&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;dot&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pa&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pb&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;dist&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pa&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;dot&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pb&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pa&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;dist&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;AB&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;pb&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;d&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
 
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;未完待续。。。&lt;/p&gt;

&lt;p&gt;注：图片和相关资料来自wikipedia和TC Algorithm Tutorial&lt;/p&gt;

&lt;p&gt;1.Wikipedia关于&lt;a href=&quot;http://zh.wikipedia.org/zh/%E6%95%B0%E9%87%8F%E7%A7%AF&quot;&gt;点积&lt;/a&gt;和&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F%E7%A7%AF&quot;&gt;叉积&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;2.TC Algorithm Tutorial 的&lt;a href=&quot;http://www.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=geometry1&quot;&gt;计算几何&lt;/a&gt;部分。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>二分查找</title>
   <link href="http://username.github.io/blog/2011/03/02/binary-search"/>
   <updated>2011-03-02T00:00:00+08:00</updated>
   <id>http://username.github.io/blog/2011/03/02/binary-search</id>
   <content type="html">&lt;p&gt;以前学的时候也没好好研究，只是大概知道思想，昨天写程序的时候发现bug了，十分惭愧，结果在网上发现了这样资料：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;二分查找可以解决（预排序数组的查找）问题：只要数组中包含T（即要查找的值），那么通过不断缩小包含T的范围，最终就可以找到它。一开始，范围覆盖整个数组。将数组的中间项与T进行比较，可以排除一半元素，范围缩小一半。就这样反复比较，反复缩小范围，最终就会在数组中找到T，或者确定原以为T所在的范围实际为空。对于包含N个元素的表，整个查找过程大约要经过log(2)N次比较。 多数程序员都觉得只要理解了上面的描述，写出代码就不难了；但事实并非如此。如果你不认同这一点，最好的办法就是放下书本，自己动手写一写。试试吧。 我在贝尔实验室和IBM的时候都出过这道考题。那些专业的程序员有几个小时的时间，可以用他们选择的语言把上面的描述写出来；写出高级伪代码也可以。考试结束后，差不多所有程序员都认为自己写出了正确的程序。于是，我们花了半个钟头来看他们编写的代码经过测试用例验证的结果。几次课，一百多人的结果相差无几：90%的程序员写的程序中有bug（我并不认为没有bug的代码就正确）。 我很惊讶：在足够的时间内，只有大约10%的专业程序员可以把这个小程序写对。但写不对这个小程序的还不止这些人：高德纳在《计算机程序设计的艺术 第3卷 排序和查找》第6.2.1节的“历史与参考文献”部分指出，虽然早在1946年就有人将二分查找的方法公诸于世，但直到1962年才有人写出没有bug的二分查找程序。 – 乔恩.本特利，《编程珠玑（第1版）》第35-36页&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;只有10%的程序员可以写出正确的二分查找程序，看来我还不属于这10%。&lt;/p&gt;

&lt;p&gt;当时错误的原因很简单，就是一个小小的bug陷入的死循环：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;bSearch&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;vector&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;size&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;break&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;乍一看是正确的，但是会陷入死循环，比如一个&lt;code&gt;vector&amp;lt;int&amp;gt;a&lt;/code&gt;,从大到小存了9个数，设为1到9，现在要找到9的位置，那么执行上述代码时，mid依次为4,6,7,7,7…，陷入死循环。&lt;/p&gt;

&lt;p&gt;正确的方法是将第7,8句修改，变成l=mid+1,r=mid-1,当然，这是保证x在a里的时候，如果x有可能不在a中，那么正确而且完整的代码如下(参考《编程珠玑(第二版)》第87页)：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;bSearch&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;vector&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;size&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(;;)&lt;/span&gt;
        &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;==&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我看到了一道课后题：用二分法返回数组a中出现的第一个x的位置，我是这样想的：&lt;/p&gt;

&lt;p&gt;在上面的基础上进行改进，如果已经搜到x的一个位置，那么如果x的前一个位置比x小，则意味着第一个x已经找到，如果前一个位置也是x，那么将r修改为mid-1;需要注意的是，如果mid==0，则直接判断mid是否是x即可，代码如下：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;bSearch2&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;vector&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;size&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(;;)&lt;/span&gt;
        &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='o'&gt;==&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='p'&gt;{&lt;/span&gt;
                &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;==&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
                &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='p'&gt;}&lt;/span&gt;    
            &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;==&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='p'&gt;{&lt;/span&gt;
                &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
                &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='p'&gt;}&lt;/span&gt;
            &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是看了《编程珠玑(第二版)》的答案后，发现答案的方法比我的思路还有效率都清晰多了：&lt;/p&gt;

&lt;p&gt;初始的循环不变式是：&lt;code&gt;a[l]&amp;lt;x &amp;amp;&amp;amp; a[r]&amp;gt;=x &amp;amp;&amp;amp; l&amp;lt;r&lt;/code&gt;,代码如下：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;bSearch3&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;vector&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;=-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;size&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
        &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;!=&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;mid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;=&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;size&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;!=&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般的程序用这个就已经很好了，因为相比于bSearch2，bSearch3每次迭代只比较一次。&lt;/p&gt;

&lt;p&gt;当然，书中还提到了进一步的优化，最终将结合搜索数组的大小，将循环展开，这样可以借助于现在计算机的流水线处理技术来增加指令集的并行，从而进一步的优化，不过一般情况下bSearch3的表现就已经相当出色，而且更容易编写和实现。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c++'&gt;    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;bSearch4&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;vector&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;=-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;512&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;1000&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;512&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;256&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+=&lt;/span&gt;&lt;span class='mi'&gt;256&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;128&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+=&lt;/span&gt;&lt;span class='mi'&gt;128&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;64&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+=&lt;/span&gt;&lt;span class='mi'&gt;64&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;32&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+=&lt;/span&gt;&lt;span class='mi'&gt;32&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;16&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+=&lt;/span&gt;&lt;span class='mi'&gt;16&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+=&lt;/span&gt;&lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+=&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+=&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+=&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
     
        &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;&lt;/span&gt;&lt;span class='mi'&gt;1000&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;!=&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;=-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个1000个数据的二分查找的优化。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>感动</title>
   <link href="http://username.github.io/blog/2010/11/08/moved"/>
   <updated>2010-11-08T00:00:00+08:00</updated>
   <id>http://username.github.io/blog/2010/11/08/moved</id>
   <content type="html">&lt;p&gt;昨天写了两次日记.&lt;/p&gt;

&lt;p&gt;首先是昨天的凌晨,你突然问:“知道今天是什么日子么?”我一看农历，冬至，吃饺子？我知道不会这么的简单，于是说不知道，然后她说伤心了，让我再想想，我突然想起我4号那天和她聊到早上4点，于是我马上翻开日记本，果然，那天你终于答应了我。想想，我真的没记住，真的是有点不应该，于是在日记了自责了一下。&lt;/p&gt;

&lt;p&gt;然后晚上，你说有东西给我，我已经知道你给我买了盆碧玉，然后让我猜还有件啥？然后说是我一直想要的。我想这一阵我想换个包，你该不会给我买了个包吧？宝贝。她说不是，然后我想了想，就知道了，我以前一直让她给我写封情书呢，嘿嘿~晚上给我了，看了后，彻底的感动了，语言十分朴实，但是句句说到了我的心里。执子之手，与子偕老，这句话虽然老，但是当时我的第一感觉就是这样的。&lt;/p&gt;

&lt;p&gt;培，为了我们的未来，加油。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;image&quot; src=&quot;/images/biyu.jpg&quot; /&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>成长</title>
   <link href="http://username.github.io/blog/2010/09/28/grow-up"/>
   <updated>2010-09-28T00:00:00+08:00</updated>
   <id>http://username.github.io/blog/2010/09/28/grow-up</id>
   <content type="html">&lt;p&gt;前几天和同学聊天，他们都说我老了，说我老爱怀念以前的时光。想想确实也是，这一阵确实想了不少东西。&lt;/p&gt;

&lt;p&gt;中秋的假期刚完，这是我在西安度过的第5个中秋节，5年了，在这个团圆的日子里却没有呆在父母的旁边。那天给爸妈打电话，我问爸妈晚饭吃了什么，他们说吃 了“芸豆”，我当时就想哭，只有我在家的时候他们才吃点好的。我工作后的第一份的工资一定要打到爸妈的卡上。不过还好，这个中秋我和她算是一起度过的吧， 真的很希望以后每个中秋都在一起。&lt;/p&gt;

&lt;p&gt;其实我现在还以为自己是个孩子，上周和同学出去办业务的时候，不认识路，刚好看到一个警察，年纪不大，估计也就30左右，我直接就喊了声“警察叔叔”，我同学当时就拉了我一下，后来才反应过来，叫警察叔叔确实不合适。。。&lt;/p&gt;

&lt;p&gt;成长，总是伴随的改变。&lt;/p&gt;

&lt;p&gt;小时候年年盼着过年，盼望着有压岁钱，虽然钱基本上都被爸妈没收了；现在回去下一辈的一大堆了，喊个叔叔我不给钱自己都觉得不太好意思了。&lt;/p&gt;

&lt;p&gt;小时候衣来伸手饭来张口，即使是高中在外面住校，也是脏衣服背回家。。。那个时候我还嫌衣服少；现在自己洗自己的衣服，虽然有时候腰疼（小时候妈妈总是说小孩子哪有腰，现在终于有了。。）。&lt;/p&gt;

&lt;p&gt;小时候一到冬天做饭不是豆角就是白菜，那时候老是抱怨吃的不好；现在在外面，食堂的饭再难吃也是先填饱肚子再说。&lt;/p&gt;

&lt;p&gt;小时候我自己睡一张双人床，我还老是抱怨为啥不是席梦思；现在在这个城市里面有个落足的地方都感觉很惬意了，虽然是硬板床，还上下铺。&lt;/p&gt;

&lt;p&gt;小时候骑着自己的破自行车就有周游世界的梦想；现在只能是做梦有辆宝马，能载着她常回家看看。&lt;/p&gt;

&lt;p&gt;小时候和同学回家讨论的话题都是这个题目怎么做，那个题目怎么做；现在和同学回宿舍，除了讨论学习，其余什么都讨论。&lt;/p&gt;

&lt;p&gt;小时候爸妈让我练毛笔字还老不乐意，练来练去连玩的时间都没有；现在两只手基本让键盘给废了，写字再也没有了章法，除了名字写的还有点样子外，用个词来形容“心乱如麻”。&lt;/p&gt;

&lt;p&gt;小时候听到《同桌的你》基本没啥感觉，和同桌吵过架，抄过作业；现在想找个同桌都难，上课两边基本都不认识，再次听到《同桌的你》，却发现再也找不到一个同桌了。&lt;/p&gt;

&lt;p&gt;小时候没有手机，过年电话拜个年都要聊半天的，还意犹未足；现在有手机了，收发短信简直就是种痛苦，还那么多重复的，不回又不太好。&lt;/p&gt;

&lt;p&gt;小时候一本小说或者漫画书都要看上好几遍，上面的台词还记得那么清晰，有事没事喊两句；现在mp3里面小说一大堆，网上动漫也是铺天盖地，能看上一遍就不错了，懒得看。&lt;/p&gt;

&lt;p&gt;小时候非常崇拜动画里或者电影里的英雄人物，幻想着有一天能像他们那样；现在一部部的动漫都有了结局，演员们也逐渐老去，也慢慢的没了偶像。&lt;/p&gt;

&lt;p&gt;小时候经常偷偷的去同学家玩小霸王，还要有个人在外面放风，家长回来了赶紧收起来然后打扑克；现在游戏那么多，可是却都是越玩越寂寞，关键是不刺激！&lt;/p&gt;

&lt;p&gt;小时候看人家早恋的人手拉手，晚上树下面亲个嘴，我却在家长和老师的教育下视早恋为猛虎，傻啊；现在想早恋了，可是却快成王老五了。。。悲剧的是还没钻石。&lt;/p&gt;

&lt;p&gt;小时候总是烦父母的唠叨，管得严，总是羡慕其他同学父母多么好；现在才知道父母无论做什么都是为我好，但是好久以来都没再听到父母熊我了。。。&lt;/p&gt;

&lt;p&gt;小时候总是盼望长大，长大了可以过自己想过的日子；现在，却发现却一直想回到小时候，再次无忧无虑的生活。&lt;/p&gt;

&lt;p&gt;虽然不想承认，但是我真的是个大人了。。。&lt;/p&gt;

&lt;p&gt;这么多年来，最想感谢的是Google和Wikipedia，这两个伟大的网站让我知道了我想知道的，学到了我想学的。虽说没有做到“秀才不出门，便知天 下事”的那种境界，但是却能让我站在客观的角度来看待整个世界。我想，这也算是成长的一部分吧，终于从那个井底爬了出来。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>我的大学四年</title>
   <link href="http://username.github.io/blog/2010/09/06/four-years-in-xdu"/>
   <updated>2010-09-06T00:00:00+08:00</updated>
   <id>http://username.github.io/blog/2010/09/06/four-years-in-xdu</id>
   <content type="html">&lt;p&gt;可以说我的大学四年虽然没有什么成就感，但是也学到了很多。关键字就是学习和游戏。&lt;/p&gt;

&lt;p&gt;既然没有什么文采，那就流水账那样记一下吧。&lt;/p&gt;

&lt;p&gt;首先是大一。时间比较久远了，记忆也比较模糊了。但是军训是记得很清楚的。我们宿舍有个每天用火影的悲情曲子呼唤我们起床，以至于现在听到那首曲子都感觉有些紧张。当时每天6点就起床，训练一天，比下地干活都累。最讨厌的就是下蹲了，难受的很，干吗要整的那么别扭?想不通。而且吃饭要一起吃，悲剧的是我们宿舍几个能吃的都和我在一起，结果就是我们这边的饭菜瞬间就没了，然后看着别人吃。一共军训了23天吧我记得，而且由于去年那一届枪走火，我们也没打靶。这一段的军训生活可以说是又苦又累。一直到现在，也没有再有类似的经历。军训完了自然我们要好好的玩一下。当时人生地不熟，也不知去哪玩，结果网吧就成为了我们的最佳选择。而且通宵的那天晚上可以说对我以后大学的影响还是比较大的。因为那天晚上接触了魔兽争霸3，而魔兽系列则贯穿了我的大学四年。在清晰的记得当时我是选择了山丘之王，而且刚开始不会玩，连人在哪不知道。在以后的日子里，网吧成了我们经常驻足的地方，火爆的“精彩在线”经常要站着等座位，有人抢的了座位后就洋洋得意的做下去开始玩了。而没去网吧的时候，宿舍的娱乐活动就剩下看电视了，陕西8频道经常放一些比较新的电影，可惜每晚上2部电影我们只能看一部半，剩下的半部因为断电也就没法看了。当然，那个时候刚从高中毕业，对学习还是比较看重的，也不敢逃课，像高数之类的课还要提前去占座。可以说，这一段时间是我大学四年学习最认真的时候，听课也是聚精会神，哎，现在很难达到这种境界了。而且大一的课程自我感觉学的也不错，也第一次体验到了编程的乐趣，刚开始什么都不会啊，连个判断素数都无从下手，当时还是百度上搜的。奥对了，当时我是十分看好百度的，李彦宏也算是当时我的偶像，而且即使现在我还是觉得“百度”这个名字起的真是赞，“众里寻他千百度”，又有技术又有诗意，可惜一个竞价排名彻底的毁了。课外活动当时也是参加的，还加入了一个社团“网迷协会”，当时因为同学认识上一届的部长，我还混了个宣传部的部长，进去后才发现，其实社团就是骗钱的，那社团收的钱虽然不是说全部，但是一部分是被我们吃掉的。知道了这点后，我对这种社团活动全然失去了兴趣，以至于后来这个社团在我们手中葬送了，虽然这和团长的没有经验有关系，但是我们的不积极肯定也是原因之一。这可能和我们学校这种十分偏向工科的氛围有关，有活动也懒得参加，搞活动的更是不容易。就这样，曾经的明星社团走向了末路。通过这次的经历，我也发现我对这些管理之类的东西很没有天赋的，于是就想技术上要有点突破，所以C语言还是学的比较认真的。可以说大一的生活虽然不是十分的丰富，但是还是很充实的，而且找到了一项自己比较喜欢的事情，就是编程，看着代码实现了各种各样的功能，有时候甚至感觉自己是个艺术家，哈哈~&lt;/p&gt;

&lt;p&gt;大二的主题就是玩。什么都玩，这个时候的我们都已经习惯了逃课，也都知道了期末考试考前突击一下就能过，而且关键问题是我们自己有电脑了，也上网了，游戏以及网络的诱惑我们确实抵抗不住了。而且自从有了电脑，宿舍的电视也没人动了，十分怀念当时宿舍8个人一起看《武林外传》的时光。就这样，游戏开始占据了我们生活的一大部分，经常是宿舍这边打那边，而我确实很菜，而且我们那边会玩的也就一个，所以基本都是输的，无论是真三还是DotA。每次都是输，那有什么意思，于是我开始玩一些其他的游戏，单机的比较多，不过最让我们沉迷的还是三国志11，对面宿舍有个刚开始玩也迷上了，当然刚开始还不怎么会玩，通宵打到明天早上7点，还是一个城没打下来。我也不用说了，举个例子，就是当时舍长给我带饭，我正玩的开心，于是说放饭盒里面，到了晚上八九点钟的样子，我就说怎么感觉有点饿，这才发现我的饭都凉了，还是我当时比较爱吃的羊肉面。这也许就真正达到了“废寝忘食”的境界。当然学习中这种情况却从来没发生过。虽然玩的也比较多，但是程序还是编一点的，我记得还拿了个校一等奖，当然那题目相对简单，这也没什么值得夸耀的。纵观大二一年，玩的多学的少，以至于后来都有点后悔。&lt;/p&gt;

&lt;p&gt;大三的时候应该说学的还是比较认真的。因为都是计算机专业的核心课程，所以说强迫自己去上课，游戏也尽量控制这不完。那时经常将魔兽争霸的文件夹给压缩起来，我把这个过程成为“封印”，当然没事就解开封印玩一玩=。=，我的自制力真的不是很强。后来就准备参加竞赛了，可是由于大二没怎么练习，大三就要开始比赛了，所以准备真的不是很充分，去北京参赛的时候我们组就做出了一道题，而且算法还不是我想出来的，也许是由于第一次参加这种大型的比赛，当时状态十分的差，很多题目虽然有点思路，但是老是考虑问题不够全面，这次比赛真正让我意识到这个世界上牛人真的是太多了，而且人才真的是让人觉得害怕。清华的大一的学生我记得做出了9道题，现在想想都觉得以自己的实力去参加这种高水平的比赛，真的是贻笑大方。当时还梦想的有一天能达到ACRush，Petr这样的水平，当时觉得真的是不自量力了。可以说大三对我的打击非常的大，甚至多多少少影响了我的人生观，从小就觉得我自己很聪明，肯定能够出人头地，现在突然发现自己是“鸡立鹤群”了，于是当时就想，干吗活的这么累，做个普通人就行了。用我同学的话说就是能够“老婆孩子热炕头”就行了。于是我辞掉了比赛，开始比较懒散的学习着。那个时候真的是比较迷茫，比大一刚来的时候还要迷茫。完全不知道该干什么。还好这个时候杨老师不知从哪里知道了我，说是有个项目，其实我的水平并不比别人好多少，尤其是看到那么多的牛人之后，完全是自卑的当时。但是摆在我面前的是个机会，于是我就加入到了项目之中。于是暑假都没回，最后项目虽然不是很完美的结束，但是也算达到了各个需求说明的功能。由于是第一次做，美工布局之类的真是难登大雅之堂。可以说这次的项目经历对我自己的提升还是比较大的。最重要的是重新给了我自信。刚开始也是完全的不会，我甚至连MFC都没怎么学过，因为当时我对开源的东西比较感兴趣，微软的东西我一直是持观望的态度。但是定下工作计划后，一步一步的做，不会就现学，最终项目还是完成了。这基本就是大三的生活，迷茫着并学习着。&lt;/p&gt;

&lt;p&gt;然后大三下学期就要准备考研了，虽然有保研的希望，但是准备工作还是要做好。讽刺的是那次对我重重打击的比赛，竟然在保送研究生的时候起到了关键的作用，这让我感到十分的无语，也十分的愧疚。我的感觉就是打了次败仗回来，结果这次败仗还成为了自己人生中少有的亮点，真的是十分的悲剧。保送后的日子就十分的清闲了，人有的时候真的是非常的贱，为什么贱人叫起来这么好听?没有了压力，没人逼你，自己就放纵自己了。就这样，我进入了堕落了大四生活。&lt;/p&gt;

&lt;p&gt;这一年的时间可以说是完完全全的浪费了，因为迷上了网游。网游这个东西确实有瘾，一旦迷上了，要沉迷很长的时间，建议没有玩过的人就不要去尝试着玩了，玩一下独立小游戏之类的放松一下就行了。不过我现在虽然对网游有点抵触，但是还是不得不承认暴雪是个伟大的公司，做的每一款游戏都是那么的成功，那么的动人。我刚开始是在自己机子上架了个私服，宿舍一起玩，不过bug真的是很多，而且人少也没意思。于是就玩起了国服，从此一发不可收拾，虽然现在我拿上了双刀，台服也推倒了巫妖王，但是失去了现实中很多美好的东西。从客观角度讲，魔兽世界也不能说是一无是处，因为从里面也学到了团队的配合，也要处理很多纠纷，也多少训练了一些全局观，甚至有时候要自己想战术来击败boss，玩的时候也很有成就感，但是这些最终还是在另外的一个世界中，虽然这个世界给我们的感觉是那么的真实和动人。所以说我的大四虽然从游戏中获得很多乐趣，但是还是十分的后悔浪费了一年的时间。一年的时间能做多少事啊。而且当时游戏中为了拿上双刀付出了多少时间和努力，要是用到学习上，肯定会获得的更多。&lt;/p&gt;

&lt;p&gt;这基本就是我的大学四年了，可以说是比较失败的，大部分时间都在混，只有少数时间做了点有意义的事。而且悲剧的是4年了，也没谈个恋爱，看着人家都牵着女朋友的手，而我牵的估计也就只有鼠标了。感觉最大的收获就是学会了编程，最失败的就是迷上了网游。&lt;/p&gt;

&lt;p&gt;现在研究生马上就要开始了，不出意外应该是我在校园里待得最后一段时光了。而且毕业面临的就是社会了，好好努力吧，即使达不到牛人的那种高度，但是自己努力了就好。希望以后总结研究生生活的时候，不要再后悔了。&lt;/p&gt;</content>
 </entry>
 
 
</feed>